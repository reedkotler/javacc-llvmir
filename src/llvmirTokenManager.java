/* Generated By:JavaCC: Do not edit this line. llvmirTokenManager.java */

/** Token Manager. */
public class llvmirTokenManager implements llvmirConstants
{

  /** Debug output. */
  public static  java.io.PrintStream debugStream = System.out;
  /** Set debug output. */
  public static  void setDebugStream(java.io.PrintStream ds) { debugStream = ds; }
private static final int jjStopStringLiteralDfa_0(int pos, long active0, long active1, long active2, long active3, long active4, long active5)
{
   switch (pos)
   {
      case 0:
         if ((active1 & 0x4L) != 0L)
            return 85;
         if ((active0 & 0x4000000000000000L) != 0L)
         {
            jjmatchedKind = 2;
            return 133;
         }
         if ((active1 & 0x2001200000000000L) != 0L || (active2 & 0x1L) != 0L || (active3 & 0x600100040060L) != 0L || (active4 & 0x1000000000038L) != 0L || (active5 & 0x4L) != 0L)
         {
            jjmatchedKind = 1;
            return 134;
         }
         if ((active0 & 0xfbffe8000000000L) != 0L || (active1 & 0xdffedffffff357faL) != 0L || (active2 & 0xfffffffffffffffeL) != 0L || (active3 & 0xffff9ffefffbff9fL) != 0L || (active4 & 0xfffeffffffffffc7L) != 0L || (active5 & 0x3L) != 0L)
         {
            jjmatchedKind = 1;
            return 133;
         }
         return -1;
      case 1:
         if ((active0 & 0x4fbffe8000000000L) != 0L || (active1 & 0xffffffffff7317faL) != 0L || (active2 & 0xffffffffffffffffL) != 0L || (active3 & 0xffffffffffffffffL) != 0L || (active4 & 0xffffffffffffffffL) != 0L || (active5 & 0x7L) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 8;
               jjmatchedPos = 1;
            }
            return 133;
         }
         return -1;
      case 2:
         if ((active0 & 0x4fbffe8000000000L) != 0L || (active1 & 0xfff7fbffff7317faL) != 0L || (active2 & 0xfffffffcffffffffL) != 0L || (active3 & 0xffffffbffffffff7L) != 0L || (active4 & 0xfffffeffffffffffL) != 0L || (active5 & 0x7L) != 0L)
         {
            if (jjmatchedPos != 2)
            {
               jjmatchedKind = 8;
               jjmatchedPos = 2;
            }
            return 133;
         }
         return -1;
      case 3:
         if ((active0 & 0xfbdde8000000000L) != 0L || (active1 & 0xfff7f1bfab7317faL) != 0L || (active2 & 0xffe00000f3fffde7L) != 0L || (active3 & 0xffffffbffffffff3L) != 0L || (active4 & 0xfffffcfffdffffffL) != 0L || (active5 & 0x7L) != 0L)
         {
            if (jjmatchedPos != 3)
            {
               jjmatchedKind = 8;
               jjmatchedPos = 3;
            }
            return 133;
         }
         return -1;
      case 4:
         if ((active0 & 0xfbd9e8000000000L) != 0L || (active1 & 0xffc7f000032317caL) != 0L || (active2 & 0xff80000002ffec04L) != 0L || (active3 & 0xff7f7fbfffffeff1L) != 0L || (active4 & 0xfffffcfffdfffffdL) != 0L || (active5 & 0x7L) != 0L)
         {
            if (jjmatchedPos != 4)
            {
               jjmatchedKind = 8;
               jjmatchedPos = 4;
            }
            return 133;
         }
         return -1;
      case 5:
         if ((active0 & 0xfbd9e8000000000L) != 0L || (active1 & 0xff43f0000102168aL) != 0L || (active2 & 0xef80000002ff2804L) != 0L || (active3 & 0xff7f3b9fffffeff1L) != 0L || (active4 & 0xffffdcfffdfffefdL) != 0L || (active5 & 0x7L) != 0L)
         {
            jjmatchedKind = 8;
            jjmatchedPos = 5;
            return 133;
         }
         return -1;
      case 6:
         if ((active0 & 0x5bc048000000000L) != 0L || (active1 & 0xf043f0000102160aL) != 0L || (active2 & 0x4c80000002ff2000L) != 0L || (active3 & 0xff7f3b1ffbfdea21L) != 0L || (active4 & 0xffff48fff9fffefdL) != 0L || (active5 & 0x7L) != 0L)
         {
            if (jjmatchedPos != 6)
            {
               jjmatchedKind = 8;
               jjmatchedPos = 6;
            }
            return 133;
         }
         return -1;
      case 7:
         if ((active0 & 0x1b4048000000000L) != 0L || (active1 & 0xb003f0000102160aL) != 0L || (active2 & 0x4480000002492000L) != 0L || (active3 & 0xf73a3b0ff9ddea21L) != 0L || (active4 & 0xfeff48ffe9f3fe7cL) != 0L || (active5 & 0x7L) != 0L)
         {
            if (jjmatchedPos != 7)
            {
               jjmatchedKind = 8;
               jjmatchedPos = 7;
            }
            return 133;
         }
         return -1;
      case 8:
         if ((active0 & 0x94048000000000L) != 0L || (active1 & 0x8003f00001001402L) != 0L || (active2 & 0x400000002490000L) != 0L || (active3 & 0xf7021a0ff891e221L) != 0L || (active4 & 0xfeff08fbe9f0ee7cL) != 0L || (active5 & 0x3L) != 0L)
         {
            if (jjmatchedPos != 8)
            {
               jjmatchedKind = 8;
               jjmatchedPos = 8;
            }
            return 133;
         }
         return -1;
      case 9:
         if ((active0 & 0x94048000000000L) != 0L || (active1 & 0x8003f00001000002L) != 0L || (active2 & 0x400000000010000L) != 0L || (active3 & 0xd1001a0dc0916221L) != 0L || (active4 & 0xfebf08f881d02c3cL) != 0L || (active5 & 0x3L) != 0L)
         {
            jjmatchedKind = 8;
            jjmatchedPos = 9;
            return 133;
         }
         return -1;
      case 10:
         if ((active0 & 0x90008000000000L) != 0L || (active1 & 0x8003f00001000000L) != 0L || (active2 & 0x10000L) != 0L || (active3 & 0x40001a0dc0914200L) != 0L || (active4 & 0xde8f089881d02c18L) != 0L || (active5 & 0x3L) != 0L)
         {
            if (jjmatchedPos != 10)
            {
               jjmatchedKind = 8;
               jjmatchedPos = 10;
            }
            return 133;
         }
         return -1;
      case 11:
         if ((active0 & 0x90008000000000L) != 0L || (active1 & 0x8002f00001000000L) != 0L || (active2 & 0x10000L) != 0L || (active3 & 0x4000180cc0110000L) != 0L || (active4 & 0xdc0f088881d00818L) != 0L || (active5 & 0x3L) != 0L)
         {
            jjmatchedKind = 8;
            jjmatchedPos = 11;
            return 133;
         }
         return -1;
      case 12:
         if ((active0 & 0x80008000000000L) != 0L || (active1 & 0x8002700001000000L) != 0L || (active3 & 0x180400010000L) != 0L || (active4 & 0xdc0f080881d00818L) != 0L || (active5 & 0x3L) != 0L)
         {
            jjmatchedKind = 8;
            jjmatchedPos = 12;
            return 133;
         }
         return -1;
      case 13:
         if ((active0 & 0x80008000000000L) != 0L || (active1 & 0x100001000000L) != 0L || (active3 & 0x180400010000L) != 0L || (active4 & 0x180d080801c00818L) != 0L || (active5 & 0x3L) != 0L)
         {
            jjmatchedKind = 8;
            jjmatchedPos = 13;
            return 133;
         }
         return -1;
      case 14:
         if ((active0 & 0x80008000000000L) != 0L || (active1 & 0x1000000L) != 0L || (active3 & 0x180400010000L) != 0L || (active4 & 0x8000801c00818L) != 0L || (active5 & 0x2L) != 0L)
         {
            if (jjmatchedPos != 14)
            {
               jjmatchedKind = 8;
               jjmatchedPos = 14;
            }
            return 133;
         }
         return -1;
      case 15:
         if ((active0 & 0x80000000000000L) != 0L || (active3 & 0x100400010000L) != 0L || (active4 & 0x400018L) != 0L || (active5 & 0x2L) != 0L)
         {
            jjmatchedKind = 8;
            jjmatchedPos = 15;
            return 133;
         }
         return -1;
      case 16:
         if ((active0 & 0x80000000000000L) != 0L || (active3 & 0x100400010000L) != 0L || (active4 & 0x18L) != 0L)
         {
            jjmatchedKind = 8;
            jjmatchedPos = 16;
            return 133;
         }
         return -1;
      case 17:
         if ((active0 & 0x80000000000000L) != 0L || (active3 & 0x100400010000L) != 0L || (active4 & 0x18L) != 0L)
         {
            jjmatchedKind = 8;
            jjmatchedPos = 17;
            return 133;
         }
         return -1;
      case 18:
         if ((active0 & 0x80000000000000L) != 0L || (active3 & 0x100000010000L) != 0L || (active4 & 0x18L) != 0L)
         {
            jjmatchedKind = 8;
            jjmatchedPos = 18;
            return 133;
         }
         return -1;
      case 19:
         if ((active0 & 0x80000000000000L) != 0L || (active3 & 0x100000010000L) != 0L || (active4 & 0x8L) != 0L)
         {
            jjmatchedKind = 8;
            jjmatchedPos = 19;
            return 133;
         }
         return -1;
      case 20:
         if ((active0 & 0x80000000000000L) != 0L || (active3 & 0x100000000000L) != 0L || (active4 & 0x8L) != 0L)
         {
            jjmatchedKind = 8;
            jjmatchedPos = 20;
            return 133;
         }
         return -1;
      case 21:
         if ((active0 & 0x80000000000000L) != 0L || (active3 & 0x100000000000L) != 0L || (active4 & 0x8L) != 0L)
         {
            jjmatchedKind = 8;
            jjmatchedPos = 21;
            return 133;
         }
         return -1;
      case 22:
         if ((active3 & 0x100000000000L) != 0L || (active4 & 0x8L) != 0L)
         {
            jjmatchedKind = 8;
            jjmatchedPos = 22;
            return 133;
         }
         return -1;
      case 23:
         if ((active4 & 0x8L) != 0L)
         {
            jjmatchedKind = 8;
            jjmatchedPos = 23;
            return 133;
         }
         return -1;
      case 24:
         if ((active4 & 0x8L) != 0L)
         {
            jjmatchedKind = 8;
            jjmatchedPos = 24;
            return 133;
         }
         return -1;
      case 25:
         if ((active4 & 0x8L) != 0L)
         {
            jjmatchedKind = 8;
            jjmatchedPos = 25;
            return 133;
         }
         return -1;
      case 26:
         if ((active4 & 0x8L) != 0L)
         {
            jjmatchedKind = 8;
            jjmatchedPos = 26;
            return 133;
         }
         return -1;
      case 27:
         if ((active4 & 0x8L) != 0L)
         {
            jjmatchedKind = 8;
            jjmatchedPos = 27;
            return 133;
         }
         return -1;
      default :
         return -1;
   }
}
private static final int jjStartNfa_0(int pos, long active0, long active1, long active2, long active3, long active4, long active5)
{
   return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0, active1, active2, active3, active4, active5), pos + 1);
}
static private int jjStopAtPos(int pos, int kind)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   return pos + 1;
}
static private int jjMoveStringLiteralDfa0_0()
{
   switch(curChar)
   {
      case 33:
         return jjStartNfaWithStates_0(0, 66, 85);
      case 40:
         return jjStopAtPos(0, 60);
      case 41:
         return jjStopAtPos(0, 61);
      case 42:
         return jjStopAtPos(0, 75);
      case 44:
         return jjStopAtPos(0, 54);
      case 46:
         return jjMoveStringLiteralDfa1_0(0x4000000000000000L, 0x0L, 0x0L, 0x0L, 0x0L, 0x0L);
      case 60:
         return jjStopAtPos(0, 77);
      case 61:
         return jjStopAtPos(0, 40);
      case 62:
         return jjStopAtPos(0, 79);
      case 91:
         return jjStopAtPos(0, 82);
      case 93:
         return jjStopAtPos(0, 83);
      case 97:
         return jjMoveStringLiteralDfa1_0(0x2200000000000L, 0x8000030004001002L, 0x2060820L, 0xf000002000018000L, 0xffe0000000L, 0x0L);
      case 98:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x4000000000000000L, 0x0L, 0x40000000008L, 0x1L, 0x0L);
      case 99:
         jjmatchedKind = 1;
         return jjMoveStringLiteralDfa1_0(0x101000000000000L, 0x0L, 0x5820000000800000L, 0x22e01L, 0xf0000000006L, 0x0L);
      case 100:
         return jjMoveStringLiteralDfa1_0(0xc00040000000000L, 0x88L, 0x0L, 0x180032000000L, 0x0L, 0x0L);
      case 101:
         return jjMoveStringLiteralDfa1_0(0x84000000000000L, 0x900000000000L, 0x100000400L, 0x1800000L, 0x0L, 0x0L);
      case 102:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x3c00024a8200140L, 0x2000000000008042L, 0x1000L, 0x100000000000L, 0x0L);
      case 103:
         return jjMoveStringLiteralDfa1_0(0x200000000000000L, 0x2000000000000L, 0x0L, 0x4000000000L, 0x200000000000L, 0x0L);
      case 104:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x20L, 0x0L, 0x4000000L, 0xc00000000000L, 0x0L);
      case 105:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x2001200000000000L, 0x1L, 0x600100040060L, 0x1000000000038L, 0x4L);
      case 106:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x0L, 0x0L, 0x40L, 0x0L);
      case 108:
         return jjMoveStringLiteralDfa1_0(0x8000000000000L, 0x8000010000L, 0x400000000001000L, 0x680180000L, 0x0L, 0x0L);
      case 109:
         return jjMoveStringLiteralDfa1_0(0x100000000000L, 0x40020000L, 0x8000000c080000L, 0x0L, 0x2000000000080L, 0x0L);
      case 110:
         return jjMoveStringLiteralDfa1_0(0x10000000000000L, 0x400000L, 0x100000210000398L, 0x7800000000002L, 0x3ff00L, 0x0L);
      case 111:
         return jjMoveStringLiteralDfa1_0(0x800000000000L, 0x40000000000L, 0x1fc0000000000L, 0x0L, 0xc0000L, 0x0L);
      case 112:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x1000000000000400L, 0x10000000000000L, 0x38008200000L, 0x3c000000000000L, 0x0L);
      case 114:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x100000L, 0x38000000000104L, 0x100000L, 0x0L);
      case 115:
         return jjMoveStringLiteralDfa1_0(0x20008000000000L, 0x820405210000000L, 0x3c000214004L, 0x3c0001000000010L, 0x1c000000fe00000L, 0x0L);
      case 116:
         return jjMoveStringLiteralDfa1_0(0x4a0000000000L, 0xc000000100000L, 0x40000000000000L, 0x40000000L, 0x0L, 0x0L);
      case 117:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x400000902000000L, 0xe003c60400000L, 0x800004080L, 0x10000000L, 0x0L);
      case 118:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x10L, 0x200000000002000L, 0x0L, 0x0L, 0x0L);
      case 119:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x8000000001000000L, 0x400000000400000L, 0x200000000000000L, 0x0L);
      case 120:
         jjmatchedKind = 1;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x80000000200L, 0x80000000L, 0x0L, 0xfc00000000000000L, 0x3L);
      case 122:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x10000001000000L, 0x0L, 0x800000000000000L, 0x0L, 0x0L);
      case 123:
         return jjStopAtPos(0, 63);
      case 125:
         return jjStopAtPos(0, 64);
      default :
         return jjMoveNfa_0(0, 0);
   }
}
static private int jjMoveStringLiteralDfa1_0(long active0, long active1, long active2, long active3, long active4, long active5)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(0, active0, active1, active2, active3, active4, active5);
      return 1;
   }
   switch(curChar)
   {
      case 46:
         return jjMoveStringLiteralDfa2_0(active0, 0x4000000000000000L, active1, 0L, active2, 0L, active3, 0L, active4, 0L, active5, 0L);
      case 56:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x200L, active2, 0L, active3, 0L, active4, 0xfc00000000000000L, active5, 0x3L);
      case 97:
         return jjMoveStringLiteralDfa2_0(active0, 0x28060000000000L, active1, 0x8210020L, active2, 0x5660000014000040L, active3, 0xe00L, active4, 0x100001e00100L, active5, 0L);
      case 99:
         if ((active3 & 0x4000000000L) != 0L)
            return jjStartNfaWithStates_0(1, 8, 133);
         else if ((active4 & 0x10000000000L) != 0L)
         {
            jjmatchedKind = 8;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0L, active2, 0x80060003L, active3, 0L, active4, 0x20000000000L, active5, 0L);
      case 100:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x8000000704001000L, active2, 0L, active3, 0L, active4, 0L, active5, 0L);
      case 101:
         if ((active2 & 0x200000000L) != 0L)
         {
            jjmatchedKind = 8;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0xc00000000000000L, active1, 0x32000001020000L, active2, 0x2040001308004L, active3, 0x8389a1002400104L, active4, 0x200000000100000L, active5, 0L);
      case 103:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0L, active2, 0x18cc00000000L, active3, 0L, active4, 0L, active5, 0L);
      case 104:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x404000000000L, active2, 0x10000000000000L, active3, 0x40000000L, active4, 0xe00000000000L, active5, 0L);
      case 105:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x4c00000000000008L, active2, 0xa000000008010080L, active3, 0x40000004180000L, active4, 0x80L, active5, 0L);
      case 108:
         return jjMoveStringLiteralDfa2_0(active0, 0x200000000000000L, active1, 0x40L, active2, 0x800633000000800L, active3, 0x7000002030002001L, active4, 0L, active5, 0L);
      case 109:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x80000000L, active2, 0x60800000L, active3, 0L, active4, 0x3e0000000L, active5, 0L);
      case 110:
         return jjMoveStringLiteralDfa2_0(active0, 0x2000000000000L, active1, 0x2001220002000000L, active2, 0xc800000400100L, active3, 0x6009000440e0L, active4, 0x1000400000038L, active5, 0x4L);
      case 111:
         if ((active1 & 0x8000000000000L) != 0L)
            return jjStartNfaWithStates_0(1, 8, 133);
         return jjMoveStringLiteralDfa2_0(active0, 0x111108000000000L, active1, 0x80000000090L, active2, 0x100000000083000L, active3, 0x7000680020002L, active4, 0x4000003fe06L, active5, 0L);
      case 112:
         return jjMoveStringLiteralDfa2_0(active0, 0x800000000000L, active1, 0x3c0000000000500L, active2, 0L, active3, 0x8000L, active4, 0xc00000000c0000L, active5, 0L);
      case 113:
         if ((active2 & 0x100000000L) != 0L)
            return jjStartNfaWithStates_0(1, 8, 133);
         break;
      case 114:
         if ((active1 & 0x40000000000L) != 0L)
         {
            jjmatchedKind = 8;
            jjmatchedPos = 1;
         }
         else if ((active3 & 0x8L) != 0L)
            return jjStartNfaWithStates_0(1, 8, 133);
         return jjMoveStringLiteralDfa2_0(active0, 0x80000000000L, active1, 0x4003800100000L, active2, 0x1000000000020L, active3, 0x8480018008201000L, active4, 0xc003800000000L, active5, 0L);
      case 115:
         return jjMoveStringLiteralDfa2_0(active0, 0x200000000000L, active1, 0x18020000000L, active2, 0x210L, active3, 0L, active4, 0x200000e000000L, active5, 0L);
      case 116:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x1000000000000002L, active2, 0x2004000L, active3, 0L, active4, 0x30000000000000L, active5, 0L);
      case 117:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x50400000L, active2, 0x80000000000008L, active3, 0L, active4, 0x41L, active5, 0L);
      case 118:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x10000L, active4, 0xc000000000L, active5, 0L);
      case 119:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x300000000000010L, active4, 0x100000010000000L, active5, 0L);
      case 120:
         return jjMoveStringLiteralDfa2_0(active0, 0x84000000000000L, active1, 0x900000000000L, active2, 0x400L, active3, 0x1800000L, active4, 0x80000000000L, active5, 0L);
      case 121:
         return jjMoveStringLiteralDfa2_0(active0, 0x400000000000L, active1, 0L, active2, 0L, active3, 0x40000000000L, active4, 0L, active5, 0L);
      default :
         break;
   }
   return jjStartNfa_0(0, active0, active1, active2, active3, active4, active5);
}
static private int jjMoveStringLiteralDfa2_0(long old0, long active0, long old1, long active1, long old2, long active2, long old3, long active3, long old4, long active4, long old5, long active5)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2) | (active3 &= old3) | (active4 &= old4) | (active5 &= old5)) == 0L)
      return jjStartNfa_0(0, old0, old1, old2, old3, old4, old5);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(1, active0, active1, active2, active3, active4, active5);
      return 2;
   }
   switch(curChar)
   {
      case 46:
         if ((active0 & 0x4000000000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 8, 133);
         break;
      case 49:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x100L, active2, 0L, active3, 0L, active4, 0L, active5, 0L);
      case 54:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x200L, active2, 0L, active3, 0L, active4, 0xfc00000000000000L, active5, 0x3L);
      case 95:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0L, active2, 0x200000000000000L, active3, 0L, active4, 0L, active5, 0L);
      case 97:
         return jjMoveStringLiteralDfa3_0(active0, 0x4800000000000L, active1, 0L, active2, 0x21001500L, active3, 0x19200000410000L, active4, 0x18L, active5, 0L);
      case 98:
         if ((active1 & 0x10000000L) != 0L)
            return jjStartNfaWithStates_0(2, 8, 133);
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x10000L, active2, 0L, active3, 0L, active4, 0x200000000000200L, active5, 0x4L);
      case 99:
         if ((active4 & 0x20000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 8, 133);
         return jjMoveStringLiteralDfa3_0(active0, 0x400000000000000L, active1, 0x400L, active2, 0x20L, active3, 0x2001680000000L, active4, 0x200000000000L, active5, 0L);
      case 100:
         if ((active1 & 0x4000000L) != 0L)
         {
            jjmatchedKind = 8;
            jjmatchedPos = 2;
         }
         else if ((active1 & 0x20000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 8, 133);
         else if ((active2 & 0x1000000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 8, 133);
         return jjMoveStringLiteralDfa3_0(active0, 0x10100000000000L, active1, 0x800000000a001000L, active2, 0L, active3, 0x4000020L, active4, 0x3e0000400L, active5, 0L);
      case 101:
         if ((active2 & 0x800000000L) != 0L)
            return jjStartNfaWithStates_0(2, 8, 133);
         else if ((active2 & 0x2000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 8, 133);
         else if ((active2 & 0x8000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 8, 133);
         else if ((active2 & 0x20000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 8, 133);
         else if ((active2 & 0x100000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 8, 133);
         else if ((active2 & 0x400000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 8, 133);
         else if ((active2 & 0x800000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 8, 133);
         else if ((active2 & 0x4000000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 8, 133);
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x80003800000000L, active2, 0x800000000000000L, active3, 0x80008000002001L, active4, 0xc000000000000L, active5, 0L);
      case 102:
         return jjMoveStringLiteralDfa3_0(active0, 0x800000000000000L, active1, 0L, active2, 0L, active3, 0x2000000L, active4, 0x200000L, active5, 0L);
      case 103:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x8040000000000000L, active4, 0L, active5, 0L);
      case 104:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x18000000000L, active2, 0x80000000L, active3, 0L, active4, 0L, active5, 0L);
      case 105:
         if ((active2 & 0x10000000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 8, 133);
         return jjMoveStringLiteralDfa3_0(active0, 0x80000000000L, active1, 0x700000010L, active2, 0x40000040000000L, active3, 0x1700002100200010L, active4, 0x1c0000000001801L, active5, 0L);
      case 107:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0x100L, active5, 0L);
      case 108:
         if ((active1 & 0x40000000L) != 0L)
            return jjStartNfaWithStates_0(2, 8, 133);
         else if ((active1 & 0x4000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 8, 133);
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x600020L, active2, 0x2020000000102804L, active3, 0x2000000030000400L, active4, 0x40000000022L, active5, 0L);
      case 109:
         if ((active0 & 0x200000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 8, 133);
         return jjMoveStringLiteralDfa3_0(active0, 0x21000000000000L, active1, 0L, active2, 0x3L, active3, 0x20000L, active4, 0x3800000040L, active5, 0L);
      case 110:
         if ((active2 & 0x8000000L) != 0L)
         {
            jjmatchedKind = 8;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0x100000000000000L, active1, 0L, active2, 0x400000010098080L, active3, 0x4000800180002L, active4, 0x1c02084L, active5, 0L);
      case 111:
         if ((active2 & 0x8000000000000L) != 0L)
         {
            jjmatchedKind = 8;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0x200000000000000L, active1, 0x40L, active2, 0x2404000L, active3, 0x10008001000L, active4, 0L, active5, 0L);
      case 112:
         if ((active4 & 0x2000000L) != 0L)
         {
            jjmatchedKind = 8;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0x400000000000L, active1, 0L, active2, 0x800000L, active3, 0x8000L, active4, 0x200000c000000L, active5, 0L);
      case 113:
         if ((active2 & 0x40000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 8, 133);
         else if ((active2 & 0x2000000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 8, 133);
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0L, active2, 0x260000L, active3, 0L, active4, 0L, active5, 0L);
      case 114:
         if ((active1 & 0x80000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 8, 133);
         return jjMoveStringLiteralDfa3_0(active0, 0x8020000000000L, active1, 0x1000000001000000L, active2, 0L, active3, 0x8005a0040004000L, active4, 0xc00001c000L, active5, 0L);
      case 115:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x1200000000008L, active2, 0x80000000000040L, active3, 0x800000000100L, active4, 0x100000000000L, active5, 0L);
      case 116:
         if ((active2 & 0x400000000L) != 0L)
            return jjStartNfaWithStates_0(2, 8, 133);
         else if ((active2 & 0x1000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 8, 133);
         else if ((active2 & 0x4000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 8, 133);
         else if ((active2 & 0x10000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 8, 133);
         else if ((active2 & 0x80000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 8, 133);
         else if ((active2 & 0x200000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 8, 133);
         else if ((active3 & 0x4L) != 0L)
         {
            jjmatchedKind = 8;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0x80040000000000L, active1, 0x6f42900000020002L, active2, 0xd100000000000000L, active3, 0x20000001840a00L, active4, 0x10000101c0000L, active5, 0L);
      case 117:
         return jjMoveStringLiteralDfa3_0(active0, 0x8000000000L, active1, 0x44000a0100080L, active2, 0L, active3, 0L, active4, 0x20000L, active5, 0L);
      case 118:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x40000000040L, active4, 0xc00000000000L, active5, 0L);
      case 119:
         if ((active2 & 0x8L) != 0L)
            return jjStartNfaWithStates_0(2, 8, 133);
         else if ((active2 & 0x10L) != 0L)
            return jjStartNfaWithStates_0(2, 8, 133);
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x4000000000000080L, active4, 0L, active5, 0L);
      case 120:
         if ((active2 & 0x4000000L) != 0L)
            return jjStartNfaWithStates_0(2, 8, 133);
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x30000000000000L, active2, 0L, active3, 0L, active4, 0x30080000000000L, active5, 0L);
      case 121:
         if ((active0 & 0x2000000000000L) != 0L)
         {
            jjmatchedKind = 8;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0x400000000L, active5, 0L);
      case 122:
         if ((active2 & 0x200L) != 0L)
            return jjStartNfaWithStates_0(2, 8, 133);
         break;
      default :
         break;
   }
   return jjStartNfa_0(1, active0, active1, active2, active3, active4, active5);
}
static private int jjMoveStringLiteralDfa3_0(long old0, long active0, long old1, long active1, long old2, long active2, long old3, long active3, long old4, long active4, long old5, long active5)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2) | (active3 &= old3) | (active4 &= old4) | (active5 &= old5)) == 0L)
      return jjStartNfa_0(1, old0, old1, old2, old3, old4, old5);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(2, active0, active1, active2, active3, active4, active5);
      return 3;
   }
   switch(curChar)
   {
      case 50:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x100L, active2, 0L, active3, 0L, active4, 0L, active5, 0L);
      case 52:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0x2000000000000L, active5, 0L);
      case 95:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x600L, active2, 0x220000L, active3, 0L, active4, 0xfc3008f800000000L, active5, 0x3L);
      case 97:
         return jjMoveStringLiteralDfa4_0(active0, 0x40000000000L, active1, 0x20040L, active2, 0xb00000000002000L, active3, 0x4002040e82002001L, active4, 0x10000000L, active5, 0L);
      case 98:
         if ((active1 & 0x20000000L) != 0L)
            return jjStartNfaWithStates_0(3, 8, 133);
         return jjMoveStringLiteralDfa4_0(active0, 0x200000000000000L, active1, 0x80L, active2, 0L, active3, 0L, active4, 0L, active5, 0L);
      case 99:
         return jjMoveStringLiteralDfa4_0(active0, 0x4000000000000L, active1, 0x4000000000000000L, active2, 0x5000000000008400L, active3, 0xa00L, active4, 0x200000000018L, active5, 0L);
      case 100:
         if ((active1 & 0x10L) != 0L)
            return jjStartNfaWithStates_0(3, 8, 133);
         else if ((active1 & 0x8000000L) != 0L)
            return jjStartNfaWithStates_0(3, 8, 133);
         else if ((active2 & 0x1000L) != 0L)
            return jjStartNfaWithStates_0(3, 8, 133);
         else if ((active2 & 0x10000000L) != 0L)
            return jjStartNfaWithStates_0(3, 8, 133);
         else if ((active4 & 0x2L) != 0L)
         {
            jjmatchedKind = 8;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0x1000000000000L, active1, 0L, active2, 0x400000000000000L, active3, 0x18000004000000L, active4, 0x40000000000L, active5, 0L);
      case 101:
         if ((active0 & 0x400000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 8, 133);
         else if ((active1 & 0x100000L) != 0L)
            return jjStartNfaWithStates_0(3, 8, 133);
         else if ((active3 & 0x2L) != 0L)
            return jjStartNfaWithStates_0(3, 8, 133);
         return jjMoveStringLiteralDfa4_0(active0, 0xa0000000000000L, active1, 0x3200002010000L, active2, 0x100004L, active3, 0x58006184c000L, active4, 0x100000021c100L, active5, 0L);
      case 102:
         if ((active1 & 0x20L) != 0L)
            return jjStartNfaWithStates_0(3, 8, 133);
         else if ((active2 & 0x80L) != 0L)
            return jjStartNfaWithStates_0(3, 8, 133);
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x400000000000L, active2, 0L, active3, 0x300008000000000L, active4, 0x100000000000000L, active5, 0L);
      case 103:
         if ((active2 & 0x80000000L) != 0L)
            return jjStartNfaWithStates_0(3, 8, 133);
         return jjMoveStringLiteralDfa4_0(active0, 0x8020000000000L, active1, 0L, active2, 0x10000L, active3, 0x1000002000000000L, active4, 0x3e0000000L, active5, 0L);
      case 104:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0L, active2, 0x8000000000000000L, active3, 0L, active4, 0L, active5, 0L);
      case 105:
         return jjMoveStringLiteralDfa4_0(active0, 0x800000000000000L, active1, 0L, active2, 0L, active3, 0x100100a0L, active4, 0x1c00020L, active5, 0L);
      case 107:
         if ((active2 & 0x1000000L) != 0L)
         {
            jjmatchedKind = 8;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x580000L, active4, 0x200000000000000L, active5, 0L);
      case 108:
         if ((active1 & 0x400000L) != 0L)
            return jjStartNfaWithStates_0(3, 8, 133);
         else if ((active1 & 0x80000000L) != 0L)
            return jjStartNfaWithStates_0(3, 8, 133);
         else if ((active2 & 0x20000000000000L) != 0L)
         {
            jjmatchedKind = 8;
            jjmatchedPos = 3;
         }
         else if ((active2 & 0x40000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 8, 133);
         return jjMoveStringLiteralDfa4_0(active0, 0x400000000000000L, active1, 0L, active2, 0L, active3, 0x1210000000400L, active4, 0x2001L, active5, 0L);
      case 109:
         if ((active1 & 0x800000000L) != 0L)
            return jjStartNfaWithStates_0(3, 8, 133);
         else if ((active1 & 0x1000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 8, 133);
         else if ((active1 & 0x2000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 8, 133);
         else if ((active3 & 0x1000L) != 0L)
            return jjStartNfaWithStates_0(3, 8, 133);
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0L, active2, 0x2000000L, active3, 0x8000000000020000L, active4, 0xc00000000800L, active5, 0L);
      case 110:
         if ((active2 & 0x100L) != 0L)
            return jjStartNfaWithStates_0(3, 8, 133);
         else if ((active2 & 0x40000000L) != 0L)
            return jjStartNfaWithStates_0(3, 8, 133);
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x4000000000000L, active2, 0L, active3, 0x44000000000000L, active4, 0x61000L, active5, 0L);
      case 111:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0xf00000001000000L, active2, 0x80800L, active3, 0x2800000000000040L, active4, 0L, active5, 0x4L);
      case 112:
         if ((active2 & 0x1L) != 0L)
            return jjStartNfaWithStates_0(3, 8, 133);
         else if ((active2 & 0x2L) != 0L)
            return jjStartNfaWithStates_0(3, 8, 133);
         else if ((active2 & 0x20L) != 0L)
            return jjStartNfaWithStates_0(3, 8, 133);
         return jjMoveStringLiteralDfa4_0(active0, 0x80000000000L, active1, 0L, active2, 0L, active3, 0L, active4, 0x40L, active5, 0L);
      case 113:
         return jjMoveStringLiteralDfa4_0(active0, 0x800000000000L, active1, 0L, active2, 0L, active3, 0L, active4, 0L, active5, 0L);
      case 114:
         if ((active1 & 0x8000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 8, 133);
         else if ((active1 & 0x10000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 8, 133);
         return jjMoveStringLiteralDfa4_0(active0, 0x8000000000L, active1, 0x8040900000001002L, active2, 0x404000L, active3, 0L, active4, 0xc0000404000000L, active5, 0L);
      case 115:
         return jjMoveStringLiteralDfa4_0(active0, 0x100000000000000L, active1, 0x200000L, active2, 0L, active3, 0x20000000000L, active4, 0xc000008080080L, active5, 0L);
      case 116:
         if ((active1 & 0x10000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 8, 133);
         else if ((active1 & 0x20000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 8, 133);
         else if ((active2 & 0x40L) != 0L)
         {
            jjmatchedKind = 8;
            jjmatchedPos = 3;
         }
         else if ((active3 & 0x800000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 8, 133);
         else if ((active3 & 0x80000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 8, 133);
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x3000000000000008L, active2, 0x2080000000000000L, active3, 0x400001108000010L, active4, 0x100000000000L, active5, 0L);
      case 117:
         return jjMoveStringLiteralDfa4_0(active0, 0x10100000000000L, active1, 0L, active2, 0x40000L, active3, 0x20000000000100L, active4, 0x100600L, active5, 0L);
      case 118:
         if ((active1 & 0x100000000L) != 0L)
            return jjStartNfaWithStates_0(3, 8, 133);
         else if ((active1 & 0x200000000L) != 0L)
            return jjStartNfaWithStates_0(3, 8, 133);
         else if ((active1 & 0x400000000L) != 0L)
            return jjStartNfaWithStates_0(3, 8, 133);
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x200000L, active4, 0x4L, active5, 0L);
      case 120:
         if ((active2 & 0x20000000L) != 0L)
            return jjStartNfaWithStates_0(3, 8, 133);
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x80000000000000L, active2, 0x800000L, active3, 0L, active4, 0L, active5, 0L);
      default :
         break;
   }
   return jjStartNfa_0(2, active0, active1, active2, active3, active4, active5);
}
static private int jjMoveStringLiteralDfa4_0(long old0, long active0, long old1, long active1, long old2, long active2, long old3, long active3, long old4, long active4, long old5, long active5)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2) | (active3 &= old3) | (active4 &= old4) | (active5 &= old5)) == 0L)
      return jjStartNfa_0(2, old0, old1, old2, old3, old4, old5);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(3, active0, active1, active2, active3, active4, active5);
      return 4;
   }
   switch(curChar)
   {
      case 51:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0x2000000000000L, active5, 0L);
      case 54:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0xc00000000000000L, active5, 0L);
      case 56:
         if ((active1 & 0x100L) != 0L)
            return jjStartNfaWithStates_0(4, 8, 133);
         break;
      case 95:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x400000L, active4, 0xc0400000000000L, active5, 0L);
      case 97:
         return jjMoveStringLiteralDfa5_0(active0, 0x601000000000000L, active1, 0x4000900000000000L, active2, 0x100000L, active3, 0x40204000L, active4, 0x3800002000L, active5, 0L);
      case 98:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0x10000000L, active5, 0L);
      case 99:
         if ((active1 & 0x4000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 8, 133);
         else if ((active4 & 0x200000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 8, 133);
         return jjMoveStringLiteralDfa5_0(active0, 0x8000000000L, active1, 0L, active2, 0xa00804L, active3, 0x2000000000000010L, active4, 0x940000004018L, active5, 0L);
      case 100:
         if ((active4 & 0x100L) != 0L)
            return jjStartNfaWithStates_0(4, 8, 133);
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x20000L, active2, 0x400000L, active3, 0L, active4, 0x10000000008000L, active5, 0L);
      case 101:
         if ((active1 & 0x200000L) != 0L)
            return jjStartNfaWithStates_0(4, 8, 133);
         else if ((active2 & 0x4000L) != 0L)
            return jjStartNfaWithStates_0(4, 8, 133);
         else if ((active2 & 0x8000L) != 0L)
            return jjStartNfaWithStates_0(4, 8, 133);
         return jjMoveStringLiteralDfa5_0(active0, 0x8020000000000L, active1, 0L, active2, 0x2000000000000000L, active3, 0x8c4000000c000400L, active4, 0xc000404000004L, active5, 0L);
      case 102:
         if ((active1 & 0x2000000L) != 0L)
            return jjStartNfaWithStates_0(4, 8, 133);
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0xc00400000000600L, active2, 0L, active3, 0x180000000000L, active4, 0x1000080000000000L, active5, 0L);
      case 103:
         if ((active3 & 0x400000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 8, 133);
         break;
      case 104:
         if ((active2 & 0x1000000000000000L) != 0L)
         {
            jjmatchedKind = 8;
            jjmatchedPos = 4;
         }
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0L, active2, 0x4000000000000000L, active3, 0xa00L, active4, 0L, active5, 0L);
      case 105:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x100000aL, active2, 0x8500000002040000L, active3, 0x1009100000000L, active4, 0x2200004000080280L, active5, 0L);
      case 107:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x40L, active4, 0x20000000000000L, active5, 0L);
      case 108:
         if ((active1 & 0x10000L) != 0L)
            return jjStartNfaWithStates_0(4, 8, 133);
         else if ((active3 & 0x40000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 8, 133);
         return jjMoveStringLiteralDfa5_0(active0, 0x1c0000000000L, active1, 0x2000000000080L, active2, 0x10000L, active3, 0x200680010000L, active4, 0x1000000001000L, active5, 0L);
      case 109:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x810000100L, active4, 0L, active5, 0L);
      case 110:
         if ((active3 & 0x2000000000L) != 0L)
         {
            jjmatchedKind = 8;
            jjmatchedPos = 4;
         }
         return jjMoveStringLiteralDfa5_0(active0, 0x800000000000000L, active1, 0L, active2, 0x800000000000000L, active3, 0x100800000000a081L, active4, 0x20L, active5, 0L);
      case 111:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x3000000000000000L, active2, 0L, active3, 0x100300001a0000L, active4, 0x40000L, active5, 0L);
      case 112:
         return jjMoveStringLiteralDfa5_0(active0, 0x10000000000000L, active1, 0L, active2, 0L, active3, 0x2000000000000L, active4, 0x3e0000c00L, active5, 0L);
      case 114:
         return jjMoveStringLiteralDfa5_0(active0, 0x80000000000000L, active1, 0x1200000000000L, active2, 0x200000000020000L, active3, 0x20000001840020L, active4, 0x4000000000100000L, active5, 0L);
      case 115:
         return jjMoveStringLiteralDfa5_0(active0, 0x20000000000000L, active1, 0x8200000000001000L, active2, 0L, active3, 0L, active4, 0x8000008000200000L, active5, 0L);
      case 116:
         if ((active1 & 0x40L) != 0L)
            return jjStartNfaWithStates_0(4, 8, 133);
         else if ((active1 & 0x80000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 8, 133);
         else if ((active2 & 0x400L) != 0L)
         {
            jjmatchedKind = 8;
            jjmatchedPos = 4;
         }
         return jjMoveStringLiteralDfa5_0(active0, 0x104000000000000L, active1, 0L, active2, 0x80000000082000L, active3, 0x300000000000000L, active4, 0x100000009c10041L, active5, 0x1L);
      case 117:
         return jjMoveStringLiteralDfa5_0(active0, 0x800000000000L, active1, 0x140000000000000L, active2, 0L, active3, 0x4000002000000L, active4, 0L, active5, 0x4L);
      case 118:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0L, active5, 0x2L);
      case 119:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0x20000L, active5, 0L);
      case 120:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x20000000L, active4, 0L, active5, 0L);
      case 121:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x4000000000000000L, active4, 0L, active5, 0L);
      default :
         break;
   }
   return jjStartNfa_0(3, active0, active1, active2, active3, active4, active5);
}
static private int jjMoveStringLiteralDfa5_0(long old0, long active0, long old1, long active1, long old2, long active2, long old3, long active3, long old4, long active4, long old5, long active5)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2) | (active3 &= old3) | (active4 &= old4) | (active5 &= old5)) == 0L)
      return jjStartNfa_0(3, old0, old1, old2, old3, old4, old5);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(4, active0, active1, active2, active3, active4, active5);
      return 5;
   }
   switch(curChar)
   {
      case 48:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0x2000000000000L, active5, 0L);
      case 52:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0xc00000000000000L, active5, 0L);
      case 95:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x400000000L, active4, 0x1000000000000L, active5, 0L);
      case 97:
         if ((active2 & 0x800L) != 0L)
            return jjStartNfaWithStates_0(5, 8, 133);
         return jjMoveStringLiteralDfa6_0(active0, 0x100040000000000L, active1, 0x20000L, active2, 0x80000000000000L, active3, 0x1000100010000L, active4, 0x1000081800000040L, active5, 0L);
      case 98:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x2L, active2, 0L, active3, 0L, active4, 0L, active5, 0L);
      case 99:
         if ((active4 & 0x40000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 8, 133);
         else if ((active4 & 0x100000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 8, 133);
         else if ((active4 & 0x800000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 8, 133);
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x900000000000L, active2, 0x2000000L, active3, 0x8004000L, active4, 0x100400000000000L, active5, 0L);
      case 100:
         if ((active3 & 0x80L) != 0L)
            return jjStartNfaWithStates_0(5, 8, 133);
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0L, active2, 0L, active3, 0xc0008000L, active4, 0L, active5, 0L);
      case 101:
         if ((active0 & 0x80000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 8, 133);
         else if ((active0 & 0x100000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 8, 133);
         else if ((active0 & 0x800000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 8, 133);
         else if ((active0 & 0x800000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 8, 133);
         else if ((active1 & 0x80L) != 0L)
            return jjStartNfaWithStates_0(5, 8, 133);
         else if ((active3 & 0x40L) != 0L)
            return jjStartNfaWithStates_0(5, 8, 133);
         else if ((active3 & 0x100L) != 0L)
            return jjStartNfaWithStates_0(5, 8, 133);
         return jjMoveStringLiteralDfa6_0(active0, 0x8000000000L, active1, 0x2000000000000L, active2, 0x430000L, active3, 0x100180a00000020L, active4, 0x4030000000000038L, active5, 0x2L);
      case 102:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0x40000000000000L, active5, 0L);
      case 103:
         if ((active2 & 0x200000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 8, 133);
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x10000000000L, active4, 0x400000000L, active5, 0L);
      case 104:
         if ((active3 & 0x10L) != 0L)
            return jjStartNfaWithStates_0(5, 8, 133);
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0L, active2, 0x800000L, active3, 0L, active4, 0L, active5, 0x1L);
      case 105:
         if ((active1 & 0x100000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 8, 133);
         else if ((active1 & 0x200000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 8, 133);
         return jjMoveStringLiteralDfa6_0(active0, 0x20000000000000L, active1, 0x1000000000000000L, active2, 0x2000L, active3, 0L, active4, 0x8001c21001L, active5, 0L);
      case 107:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0x80000000000000L, active5, 0L);
      case 108:
         if ((active0 & 0x200000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 8, 133);
         else if ((active2 & 0x100000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 8, 133);
         return jjMoveStringLiteralDfa6_0(active0, 0x10000000000000L, active1, 0x400000000000L, active2, 0L, active3, 0x4000002000000L, active4, 0x10000e00L, active5, 0L);
      case 109:
         return jjMoveStringLiteralDfa6_0(active0, 0x4000000000000L, active1, 0L, active2, 0L, active3, 0x8000000000000000L, active4, 0L, active5, 0L);
      case 110:
         if ((active2 & 0x8000000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 8, 133);
         else if ((active3 & 0x20000L) != 0L)
            return jjStartNfaWithStates_0(5, 8, 133);
         else if ((active3 & 0x4000000L) != 0L)
            return jjStartNfaWithStates_0(5, 8, 133);
         return jjMoveStringLiteralDfa6_0(active0, 0x80000000000000L, active1, 0x40000001000008L, active2, 0x400000000000000L, active3, 0x300200019c0000L, active4, 0x2000004000140000L, active5, 0x4L);
      case 111:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0L, active2, 0x80000L, active3, 0x408201000400000L, active4, 0L, active5, 0L);
      case 112:
         if ((active1 & 0x400000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 8, 133);
         else if ((active1 & 0x800000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 8, 133);
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0xa000000000001600L, active2, 0x4000000000000000L, active3, 0x30000000L, active4, 0x2000000000L, active5, 0L);
      case 113:
         if ((active4 & 0x4000000L) != 0L)
            return jjStartNfaWithStates_0(5, 8, 133);
         break;
      case 114:
         if ((active2 & 0x2000000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 8, 133);
         else if ((active3 & 0x400L) != 0L)
            return jjStartNfaWithStates_0(5, 8, 133);
         return jjMoveStringLiteralDfa6_0(active0, 0x400000000000000L, active1, 0L, active2, 0x40000L, active3, 0x800L, active4, 0xc000008000004L, active5, 0L);
      case 115:
         return jjMoveStringLiteralDfa6_0(active0, 0x8000000000000L, active1, 0x4000000000000000L, active2, 0x300000L, active3, 0x7200000000000200L, active4, 0L, active5, 0L);
      case 116:
         if ((active0 & 0x20000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 8, 133);
         else if ((active0 & 0x1000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 8, 133);
         else if ((active2 & 0x4L) != 0L)
            return jjStartNfaWithStates_0(5, 8, 133);
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x1200000000000L, active2, 0L, active3, 0x2000000200000L, active4, 0x8200000000200000L, active5, 0L);
      case 117:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0L, active2, 0x800000000000000L, active3, 0x2001L, active4, 0x3e0014000L, active5, 0L);
      case 120:
         if ((active3 & 0x8000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 8, 133);
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x840000000000000L, active4, 0L, active5, 0L);
      case 122:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0x8a080L, active5, 0L);
      default :
         break;
   }
   return jjStartNfa_0(4, active0, active1, active2, active3, active4, active5);
}
static private int jjMoveStringLiteralDfa6_0(long old0, long active0, long old1, long active1, long old2, long active2, long old3, long active3, long old4, long active4, long old5, long active5)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2) | (active3 &= old3) | (active4 &= old4) | (active5 &= old5)) == 0L)
      return jjStartNfa_0(4, old0, old1, old2, old3, old4, old5);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(5, active0, active1, active2, active3, active4, active5);
      return 6;
   }
   switch(curChar)
   {
      case 49:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x400L, active2, 0L, active3, 0L, active4, 0L, active5, 0L);
      case 56:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x200L, active2, 0L, active3, 0L, active4, 0L, active5, 0L);
      case 95:
         return jjMoveStringLiteralDfa7_0(active0, 0x8000000000L, active1, 0L, active2, 0L, active3, 0x40800000L, active4, 0xe020003e0000000L, active5, 0L);
      case 97:
         return jjMoveStringLiteralDfa7_0(active0, 0x84000000000000L, active1, 0x8000000000001000L, active2, 0x4000000000000000L, active3, 0x20001040000L, active4, 0x200000L, active5, 0L);
      case 98:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x10000L, active4, 0x40L, active5, 0L);
      case 99:
         if ((active1 & 0x40000000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 8, 133);
         else if ((active4 & 0x100000000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 8, 133);
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x8L, active2, 0L, active3, 0x200000180020L, active4, 0x402400000000L, active5, 0x2L);
      case 100:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x800400000L, active4, 0x8000000000000000L, active5, 0x4L);
      case 101:
         if ((active0 & 0x400000000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 8, 133);
         else if ((active2 & 0x40000L) != 0L)
            return jjStartNfaWithStates_0(6, 8, 133);
         else if ((active2 & 0x100000L) != 0L)
            return jjStartNfaWithStates_0(6, 8, 133);
         else if ((active3 & 0x200000L) != 0L)
            return jjStartNfaWithStates_0(6, 8, 133);
         else if ((active4 & 0x80L) != 0L)
            return jjStartNfaWithStates_0(6, 8, 133);
         else if ((active4 & 0x40000L) != 0L)
            return jjStartNfaWithStates_0(6, 8, 133);
         else if ((active4 & 0x80000L) != 0L)
            return jjStartNfaWithStates_0(6, 8, 133);
         else if ((active4 & 0x10000000L) != 0L)
            return jjStartNfaWithStates_0(6, 8, 133);
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x600000000000L, active2, 0L, active3, 0x220000000000800L, active4, 0x80000000000000L, active5, 0L);
      case 103:
         if ((active2 & 0x800000L) != 0L)
            return jjStartNfaWithStates_0(6, 8, 133);
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0L, active2, 0x400000000000000L, active3, 0L, active4, 0x4000008000000004L, active5, 0L);
      case 104:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x4000L, active4, 0x20L, active5, 0L);
      case 105:
         return jjMoveStringLiteralDfa7_0(active0, 0x10000000000000L, active1, 0x1000000L, active2, 0x80000000000000L, active3, 0x6000000000008000L, active4, 0xc00L, active5, 0x1L);
      case 108:
         if ((active2 & 0x20000L) != 0L)
            return jjStartNfaWithStates_0(6, 8, 133);
         else if ((active3 & 0x4000000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 8, 133);
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0L, active2, 0x2000L, active3, 0x10000100000000L, active4, 0L, active5, 0L);
      case 109:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x2000000000000L, active2, 0L, active3, 0L, active4, 0L, active5, 0L);
      case 110:
         if ((active3 & 0x1000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 8, 133);
         else if ((active4 & 0x1L) != 0L)
            return jjStartNfaWithStates_0(6, 8, 133);
         return jjMoveStringLiteralDfa7_0(active0, 0x100000000000000L, active1, 0x1000000000000000L, active2, 0x80000L, active3, 0x408000000000000L, active4, 0x21000L, active5, 0L);
      case 111:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x8000000030000000L, active4, 0x1000008008000L, active5, 0L);
      case 112:
         if ((active2 & 0x800000000000000L) != 0L)
         {
            jjmatchedKind = 8;
            jjmatchedPos = 6;
         }
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x2001L, active4, 0x1800000000L, active5, 0L);
      case 114:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0L, active2, 0x2400000L, active3, 0x100180000000000L, active4, 0x20000000014000L, active5, 0L);
      case 115:
         if ((active3 & 0x1000000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 8, 133);
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0x1000080000100018L, active5, 0L);
      case 116:
         if ((active0 & 0x8000000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 8, 133);
         else if ((active1 & 0x4000000000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 8, 133);
         else if ((active2 & 0x200000L) != 0L)
            return jjStartNfaWithStates_0(6, 8, 133);
         else if ((active3 & 0x2000000L) != 0L)
            return jjStartNfaWithStates_0(6, 8, 133);
         else if ((active3 & 0x40000000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 8, 133);
         else if ((active3 & 0x800000000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 8, 133);
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x2000900000020000L, active2, 0x10000L, active3, 0x1000000008000000L, active4, 0x2000004000000200L, active5, 0L);
      case 117:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x2L, active2, 0L, active3, 0x2010400000000L, active4, 0x40000000000000L, active5, 0L);
      case 118:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x1000000000000L, active2, 0L, active3, 0L, active4, 0x1c000000000000L, active5, 0L);
      case 119:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x200L, active4, 0L, active5, 0L);
      case 120:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x200000000L, active4, 0L, active5, 0L);
      case 121:
         return jjMoveStringLiteralDfa7_0(active0, 0x40000000000L, active1, 0L, active2, 0L, active3, 0x80000000L, active4, 0x2000L, active5, 0L);
      case 122:
         return jjMoveStringLiteralDfa7_0(active0, 0x20000000000000L, active1, 0L, active2, 0L, active3, 0L, active4, 0x1c00000L, active5, 0L);
      default :
         break;
   }
   return jjStartNfa_0(5, active0, active1, active2, active3, active4, active5);
}
static private int jjMoveStringLiteralDfa7_0(long old0, long active0, long old1, long active1, long old2, long active2, long old3, long active3, long old4, long active4, long old5, long active5)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2) | (active3 &= old3) | (active4 &= old4) | (active5 &= old5)) == 0L)
      return jjStartNfa_0(5, old0, old1, old2, old3, old4, old5);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(6, active0, active1, active2, active3, active4, active5);
      return 7;
   }
   switch(curChar)
   {
      case 48:
         if ((active1 & 0x200L) != 0L)
            return jjStartNfaWithStates_0(7, 8, 133);
         break;
      case 50:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x400L, active2, 0L, active3, 0L, active4, 0L, active5, 0L);
      case 95:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x800000000L, active4, 0x100000L, active5, 0L);
      case 97:
         if ((active1 & 0x20000L) != 0L)
            return jjStartNfaWithStates_0(7, 8, 133);
         else if ((active3 & 0x200000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 8, 133);
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x1000000000000L, active2, 0L, active3, 0x1000000000004000L, active4, 0L, active5, 0L);
      case 98:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0x2000L, active5, 0L);
      case 99:
         if ((active4 & 0x400000000L) != 0L)
            return jjStartNfaWithStates_0(7, 8, 133);
         else if ((active4 & 0x400000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 8, 133);
         return jjMoveStringLiteralDfa8_0(active0, 0x10000000000000L, active1, 0x8000000000001000L, active2, 0L, active3, 0L, active4, 0xc001001820200c00L, active5, 0L);
      case 100:
         if ((active2 & 0x4000000000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 8, 133);
         else if ((active3 & 0x20000000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 8, 133);
         else if ((active4 & 0x20000L) != 0L)
            return jjStartNfaWithStates_0(7, 8, 133);
         break;
      case 101:
         if ((active0 & 0x20000000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 8, 133);
         else if ((active2 & 0x2000L) != 0L)
            return jjStartNfaWithStates_0(7, 8, 133);
         else if ((active3 & 0x80000L) != 0L)
         {
            jjmatchedKind = 8;
            jjmatchedPos = 7;
         }
         else if ((active3 & 0x10000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 8, 133);
         else if ((active3 & 0x8000000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 8, 133);
         else if ((active4 & 0x1000L) != 0L)
            return jjStartNfaWithStates_0(7, 8, 133);
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x2100000000000L, active2, 0x400000L, active3, 0x180308100000L, active4, 0xc000001c00004L, active5, 0L);
      case 102:
         return jjMoveStringLiteralDfa8_0(active0, 0x8000000000L, active1, 0L, active2, 0L, active3, 0L, active4, 0L, active5, 0L);
      case 103:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0x40000000L, active5, 0L);
      case 104:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0L, active2, 0x10000L, active3, 0L, active4, 0L, active5, 0L);
      case 105:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0L, active2, 0x80000L, active3, 0x200L, active4, 0x12000000000220L, active5, 0L);
      case 106:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0x200000000000000L, active5, 0L);
      case 107:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0x80000000L, active5, 0L);
      case 108:
         if ((active2 & 0x80000000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 8, 133);
         else if ((active3 & 0x40000L) != 0L)
            return jjStartNfaWithStates_0(7, 8, 133);
         else if ((active3 & 0x1000000L) != 0L)
         {
            jjmatchedKind = 8;
            jjmatchedPos = 7;
         }
         return jjMoveStringLiteralDfa8_0(active0, 0x80000000000000L, active1, 0x200000000000L, active2, 0L, active3, 0x600020040010000L, active4, 0x40L, active5, 0L);
      case 109:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0L, active2, 0x2000000L, active3, 0L, active4, 0L, active5, 0L);
      case 110:
         if ((active4 & 0x10000L) != 0L)
            return jjStartNfaWithStates_0(7, 8, 133);
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0L, active2, 0L, active3, 0xc000000480008000L, active4, 0x60008008008000L, active5, 0L);
      case 111:
         return jjMoveStringLiteralDfa8_0(active0, 0x40000000000L, active1, 0L, active2, 0L, active3, 0L, active4, 0L, active5, 0L);
      case 112:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0L, active2, 0x400000000000000L, active3, 0x1L, active4, 0x100000000L, active5, 0L);
      case 114:
         if ((active1 & 0x2000000000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 8, 133);
         else if ((active3 & 0x400000L) != 0L)
            return jjStartNfaWithStates_0(7, 8, 133);
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x102000030002000L, active4, 0x2080004000000000L, active5, 0L);
      case 115:
         if ((active5 & 0x4L) != 0L)
            return jjStartNfaWithStates_0(7, 8, 133);
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0x400002000004018L, active5, 0x1L);
      case 116:
         if ((active0 & 0x100000000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 8, 133);
         else if ((active1 & 0x8L) != 0L)
            return jjStartNfaWithStates_0(7, 8, 133);
         else if ((active1 & 0x1000000000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 8, 133);
         else if ((active3 & 0x800L) != 0L)
            return jjStartNfaWithStates_0(7, 8, 133);
         return jjMoveStringLiteralDfa8_0(active0, 0x4000000000000L, active1, 0x1000002L, active2, 0L, active3, 0x20L, active4, 0x1000080000000000L, active5, 0x2L);
      case 118:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0xc00000000000L, active2, 0L, active3, 0L, active4, 0x200000000L, active5, 0L);
      case 119:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x800000L, active4, 0x800000000000000L, active5, 0L);
      case 121:
         if ((active3 & 0x10000000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 8, 133);
         break;
      case 122:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x2000000000000000L, active4, 0L, active5, 0L);
      default :
         break;
   }
   return jjStartNfa_0(6, active0, active1, active2, active3, active4, active5);
}
static private int jjMoveStringLiteralDfa8_0(long old0, long active0, long old1, long active1, long old2, long active2, long old3, long active3, long old4, long active4, long old5, long active5)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2) | (active3 &= old3) | (active4 &= old4) | (active5 &= old5)) == 0L)
      return jjStartNfa_0(6, old0, old1, old2, old3, old4, old5);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(7, active0, active1, active2, active3, active4, active5);
      return 8;
   }
   switch(curChar)
   {
      case 56:
         if ((active1 & 0x400L) != 0L)
            return jjStartNfaWithStates_0(8, 8, 133);
         break;
      case 95:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x100000L, active4, 0xc080001c00000L, active5, 0L);
      case 97:
         return jjMoveStringLiteralDfa9_0(active0, 0x10000000000000L, active1, 0x800000000000L, active2, 0x400000000000000L, active3, 0x880000001L, active4, 0xc000008000000400L, active5, 0L);
      case 98:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x4020L, active4, 0L, active5, 0L);
      case 99:
         if ((active2 & 0x80000L) != 0L)
            return jjStartNfaWithStates_0(8, 8, 133);
         else if ((active3 & 0x200000000L) != 0L)
            return jjStartNfaWithStates_0(8, 8, 133);
         else if ((active4 & 0x40000000000000L) != 0L)
            return jjStartNfaWithStates_0(8, 8, 133);
         return jjMoveStringLiteralDfa9_0(active0, 0x4000000000000L, active1, 0L, active2, 0L, active3, 0x1000000000000000L, active4, 0x3010006000000000L, active5, 0x1L);
      case 100:
         if ((active2 & 0x400000L) != 0L)
            return jjStartNfaWithStates_0(8, 8, 133);
         else if ((active3 & 0x8000000L) != 0L)
            return jjStartNfaWithStates_0(8, 8, 133);
         break;
      case 101:
         if ((active1 & 0x1000L) != 0L)
         {
            jjmatchedKind = 8;
            jjmatchedPos = 8;
         }
         else if ((active3 & 0x2000000000000L) != 0L)
            return jjStartNfaWithStates_0(8, 8, 133);
         else if ((active3 & 0x2000000000000000L) != 0L)
            return jjStartNfaWithStates_0(8, 8, 133);
         else if ((active4 & 0x40L) != 0L)
            return jjStartNfaWithStates_0(8, 8, 133);
         else if ((active4 & 0x4000L) != 0L)
            return jjStartNfaWithStates_0(8, 8, 133);
         else if ((active4 & 0x8000L) != 0L)
            return jjStartNfaWithStates_0(8, 8, 133);
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x8000600000000002L, active2, 0L, active3, 0x812000L, active4, 0x20000080000000L, active5, 0L);
      case 102:
         if ((active3 & 0x200000000000000L) != 0L)
            return jjStartNfaWithStates_0(8, 8, 133);
         break;
      case 103:
         if ((active3 & 0x8000L) != 0L)
            return jjStartNfaWithStates_0(8, 8, 133);
         else if ((active4 & 0x8000000L) != 0L)
            return jjStartNfaWithStates_0(8, 8, 133);
         break;
      case 105:
         return jjMoveStringLiteralDfa9_0(active0, 0x8000000000L, active1, 0x1000000L, active2, 0L, active3, 0x20000000000L, active4, 0x800000000002818L, active5, 0L);
      case 107:
         if ((active4 & 0x200000L) != 0L)
            return jjStartNfaWithStates_0(8, 8, 133);
         break;
      case 108:
         return jjMoveStringLiteralDfa9_0(active0, 0x80000000000000L, active1, 0x1100000000000L, active2, 0L, active3, 0xc000000000000000L, active4, 0x1000000000000L, active5, 0L);
      case 110:
         if ((active4 & 0x200L) != 0L)
            return jjStartNfaWithStates_0(8, 8, 133);
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x2000000000000L, active2, 0L, active3, 0x180400000000L, active4, 0x82000000000024L, active5, 0L);
      case 111:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x100000040000000L, active4, 0L, active5, 0x2L);
      case 114:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0L, active2, 0x10000L, active3, 0L, active4, 0L, active5, 0L);
      case 115:
         if ((active4 & 0x20000000L) != 0L)
            return jjStartNfaWithStates_0(8, 8, 133);
         else if ((active4 & 0x40000000L) != 0L)
            return jjStartNfaWithStates_0(8, 8, 133);
         else if ((active4 & 0x100000000L) != 0L)
            return jjStartNfaWithStates_0(8, 8, 133);
         else if ((active4 & 0x200000000L) != 0L)
            return jjStartNfaWithStates_0(8, 8, 133);
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0x200001800000000L, active5, 0L);
      case 116:
         if ((active3 & 0x10000000L) != 0L)
            return jjStartNfaWithStates_0(8, 8, 133);
         else if ((active3 & 0x20000000L) != 0L)
            return jjStartNfaWithStates_0(8, 8, 133);
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x200L, active4, 0x100000L, active5, 0L);
      case 117:
         return jjMoveStringLiteralDfa9_0(active0, 0x40000000000L, active1, 0L, active2, 0L, active3, 0L, active4, 0L, active5, 0L);
      case 119:
         if ((active2 & 0x2000000L) != 0L)
            return jjStartNfaWithStates_0(8, 8, 133);
         break;
      case 120:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x100000000L, active4, 0L, active5, 0L);
      case 121:
         if ((active3 & 0x400000000000000L) != 0L)
            return jjStartNfaWithStates_0(8, 8, 133);
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0x400000000000000L, active5, 0L);
      default :
         break;
   }
   return jjStartNfa_0(7, active0, active1, active2, active3, active4, active5);
}
static private int jjMoveStringLiteralDfa9_0(long old0, long active0, long old1, long active1, long old2, long active2, long old3, long active3, long old4, long active4, long old5, long active5)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2) | (active3 &= old3) | (active4 &= old4) | (active5 &= old5)) == 0L)
      return jjStartNfa_0(7, old0, old1, old2, old3, old4, old5);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(8, active0, active1, active2, active3, active4, active5);
      return 9;
   }
   switch(curChar)
   {
      case 95:
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x10000L, active4, 0x1000800000000L, active5, 0L);
      case 97:
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0x1000000L, active2, 0L, active3, 0x400800000L, active4, 0x1004000000400000L, active5, 0x1L);
      case 98:
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0x18L, active5, 0L);
      case 99:
         if ((active4 & 0x2000000000L) != 0L)
            return jjStartNfaWithStates_0(9, 8, 133);
         else if ((active4 & 0x4000000000L) != 0L)
            return jjStartNfaWithStates_0(9, 8, 133);
         else if ((active4 & 0x2000000000000000L) != 0L)
            return jjStartNfaWithStates_0(9, 8, 133);
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0x8000400000000000L, active2, 0L, active3, 0x180040000200L, active4, 0x200001000000000L, active5, 0L);
      case 100:
         if ((active2 & 0x400000000000000L) != 0L)
            return jjStartNfaWithStates_0(9, 8, 133);
         else if ((active3 & 0x1L) != 0L)
            return jjStartNfaWithStates_0(9, 8, 133);
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x800000000L, active4, 0L, active5, 0L);
      case 101:
         if ((active4 & 0x10000000000000L) != 0L)
            return jjStartNfaWithStates_0(9, 8, 133);
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0x100000000000L, active2, 0x10000L, active3, 0x100000000L, active4, 0x80000000000000L, active5, 0L);
      case 104:
         if ((active0 & 0x4000000000000L) != 0L)
            return jjStartNfaWithStates_0(9, 8, 133);
         break;
      case 105:
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x4000000000000000L, active4, 0L, active5, 0L);
      case 107:
         if ((active3 & 0x1000000000000000L) != 0L)
            return jjStartNfaWithStates_0(9, 8, 133);
         break;
      case 108:
         if ((active4 & 0x20000000000000L) != 0L)
            return jjStartNfaWithStates_0(9, 8, 133);
         return jjMoveStringLiteralDfa10_0(active0, 0x8000000000L, active1, 0x800000000000L, active2, 0L, active3, 0x4000L, active4, 0xc000008000000000L, active5, 0L);
      case 109:
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0x200000000000L, active2, 0L, active3, 0x80000000L, active4, 0x8000000800000L, active5, 0L);
      case 110:
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0x800000000002000L, active5, 0L);
      case 111:
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x100000L, active4, 0L, active5, 0L);
      case 114:
         if ((active3 & 0x20L) != 0L)
            return jjStartNfaWithStates_0(9, 8, 133);
         else if ((active3 & 0x100000000000000L) != 0L)
            return jjStartNfaWithStates_0(9, 8, 133);
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0x80000000L, active5, 0x2L);
      case 115:
         if ((active1 & 0x2L) != 0L)
            return jjStartNfaWithStates_0(9, 8, 133);
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0x400000000000000L, active5, 0L);
      case 116:
         if ((active0 & 0x40000000000L) != 0L)
            return jjStartNfaWithStates_0(9, 8, 133);
         else if ((active3 & 0x2000L) != 0L)
            return jjStartNfaWithStates_0(9, 8, 133);
         else if ((active4 & 0x4L) != 0L)
            return jjStartNfaWithStates_0(9, 8, 133);
         else if ((active4 & 0x20L) != 0L)
            return jjStartNfaWithStates_0(9, 8, 133);
         return jjMoveStringLiteralDfa10_0(active0, 0x10000000000000L, active1, 0x2000000000000L, active2, 0L, active3, 0x20000000000L, active4, 0x2080001000c00L, active5, 0L);
      case 117:
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0x1000000000000L, active2, 0L, active3, 0L, active4, 0L, active5, 0L);
      case 119:
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0x100000L, active5, 0L);
      case 121:
         if ((active3 & 0x8000000000000000L) != 0L)
            return jjStartNfaWithStates_0(9, 8, 133);
         return jjMoveStringLiteralDfa10_0(active0, 0x80000000000000L, active1, 0L, active2, 0L, active3, 0L, active4, 0L, active5, 0L);
      default :
         break;
   }
   return jjStartNfa_0(8, active0, active1, active2, active3, active4, active5);
}
static private int jjMoveStringLiteralDfa10_0(long old0, long active0, long old1, long active1, long old2, long active2, long old3, long active3, long old4, long active4, long old5, long active5)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2) | (active3 &= old3) | (active4 &= old4) | (active5 &= old5)) == 0L)
      return jjStartNfa_0(8, old0, old1, old2, old3, old4, old5);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(9, active0, active1, active2, active3, active4, active5);
      return 10;
   }
   switch(curChar)
   {
      case 54:
         return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0x800000000000000L, active5, 0L);
      case 95:
         return jjMoveStringLiteralDfa11_0(active0, 0x80000000000000L, active1, 0L, active2, 0L, active3, 0L, active4, 0L, active5, 0L);
      case 97:
         return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0x8000000000000000L, active2, 0x10000L, active3, 0x40000000L, active4, 0L, active5, 0L);
      case 98:
         return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0x1000000000000L, active5, 0L);
      case 99:
         if ((active3 & 0x100000000L) != 0L)
            return jjStartNfaWithStates_0(10, 8, 133);
         else if ((active4 & 0x1000000000L) != 0L)
            return jjStartNfaWithStates_0(10, 8, 133);
         else if ((active4 & 0x200000000000000L) != 0L)
            return jjStartNfaWithStates_0(10, 8, 133);
         return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0x8000000000L, active5, 0x2L);
      case 100:
         if ((active4 & 0x2000L) != 0L)
            return jjStartNfaWithStates_0(10, 8, 133);
         return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x800100000L, active4, 0x400000L, active5, 0L);
      case 101:
         if ((active1 & 0x1000000000000L) != 0L)
            return jjStartNfaWithStates_0(10, 8, 133);
         else if ((active3 & 0x4000L) != 0L)
            return jjStartNfaWithStates_0(10, 8, 133);
         else if ((active4 & 0x400L) != 0L)
         {
            jjmatchedKind = 8;
            jjmatchedPos = 10;
         }
         return jjMoveStringLiteralDfa11_0(active0, 0x10008000000000L, active1, 0x200000000000L, active2, 0L, active3, 0x180000010000L, active4, 0x800000L, active5, 0L);
      case 102:
         return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0x800L, active5, 0L);
      case 104:
         if ((active3 & 0x200L) != 0L)
            return jjStartNfaWithStates_0(10, 8, 133);
         return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0x1000000L, active5, 0L);
      case 105:
         return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x80000000L, active4, 0x100000L, active5, 0L);
      case 107:
         if ((active3 & 0x800000L) != 0L)
            return jjStartNfaWithStates_0(10, 8, 133);
         break;
      case 108:
         if ((active4 & 0x80000000000000L) != 0L)
            return jjStartNfaWithStates_0(10, 8, 133);
         return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0x1000000L, active2, 0L, active3, 0L, active4, 0xd004080000000018L, active5, 0x1L);
      case 109:
         return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0x100000000000L, active2, 0L, active3, 0x400000000L, active4, 0L, active5, 0L);
      case 110:
         return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x4000000000000000L, active4, 0x80000000L, active5, 0L);
      case 111:
         return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0x8000000000000L, active5, 0L);
      case 112:
         return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0x2000000000000L, active2, 0L, active3, 0L, active4, 0L, active5, 0L);
      case 114:
         return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0x2000000000000L, active5, 0L);
      case 116:
         return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0x400000000000L, active2, 0L, active3, 0L, active4, 0L, active5, 0L);
      case 117:
         return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0x800000000000L, active2, 0L, active3, 0L, active4, 0L, active5, 0L);
      case 118:
         return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0x400000800000000L, active5, 0L);
      case 121:
         if ((active3 & 0x20000000000L) != 0L)
            return jjStartNfaWithStates_0(10, 8, 133);
         break;
      default :
         break;
   }
   return jjStartNfa_0(9, active0, active1, active2, active3, active4, active5);
}
static private int jjMoveStringLiteralDfa11_0(long old0, long active0, long old1, long active1, long old2, long active2, long old3, long active3, long old4, long active4, long old5, long active5)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2) | (active3 &= old3) | (active4 &= old4) | (active5 &= old5)) == 0L)
      return jjStartNfa_0(9, old0, old1, old2, old3, old4, old5);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(10, active0, active1, active2, active3, active4, active5);
      return 11;
   }
   switch(curChar)
   {
      case 52:
         return jjMoveStringLiteralDfa12_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0x800000000000000L, active5, 0L);
      case 97:
         return jjMoveStringLiteralDfa12_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x180000000000L, active4, 0L, active5, 0x2L);
      case 99:
         if ((active3 & 0x80000000L) != 0L)
            return jjStartNfaWithStates_0(11, 8, 133);
         else if ((active4 & 0x8000000000L) != 0L)
            return jjStartNfaWithStates_0(11, 8, 133);
         return jjMoveStringLiteralDfa12_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0xc402000000100000L, active5, 0L);
      case 100:
         if ((active2 & 0x10000L) != 0L)
            return jjStartNfaWithStates_0(11, 8, 133);
         return jjMoveStringLiteralDfa12_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0x400000L, active5, 0L);
      case 101:
         if ((active1 & 0x800000000000L) != 0L)
            return jjStartNfaWithStates_0(11, 8, 133);
         else if ((active3 & 0x4000000000000000L) != 0L)
            return jjStartNfaWithStates_0(11, 8, 133);
         return jjMoveStringLiteralDfa12_0(active0, 0L, active1, 0x100000000000L, active2, 0L, active3, 0x400000000L, active4, 0x80000018L, active5, 0L);
      case 102:
         return jjMoveStringLiteralDfa12_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0x800000000L, active5, 0L);
      case 105:
         return jjMoveStringLiteralDfa12_0(active0, 0x80000000000000L, active1, 0x1000000L, active2, 0L, active3, 0L, active4, 0x1000000000000L, active5, 0L);
      case 108:
         if ((active3 & 0x40000000L) != 0L)
            return jjStartNfaWithStates_0(11, 8, 133);
         return jjMoveStringLiteralDfa12_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0x1004000000000800L, active5, 0x1L);
      case 109:
         return jjMoveStringLiteralDfa12_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0x800000L, active5, 0L);
      case 110:
         return jjMoveStringLiteralDfa12_0(active0, 0x8000000000L, active1, 0x200000000000L, active2, 0L, active3, 0L, active4, 0L, active5, 0L);
      case 111:
         return jjMoveStringLiteralDfa12_0(active0, 0L, active1, 0x400000000000L, active2, 0L, active3, 0L, active4, 0L, active5, 0L);
      case 114:
         if ((active3 & 0x100000L) != 0L)
            return jjStartNfaWithStates_0(11, 8, 133);
         else if ((active3 & 0x800000000L) != 0L)
            return jjStartNfaWithStates_0(11, 8, 133);
         return jjMoveStringLiteralDfa12_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0x1000000L, active5, 0L);
      case 115:
         if ((active0 & 0x10000000000000L) != 0L)
            return jjStartNfaWithStates_0(11, 8, 133);
         return jjMoveStringLiteralDfa12_0(active0, 0L, active1, 0x8000000000000000L, active2, 0L, active3, 0L, active4, 0x8080000000000L, active5, 0L);
      case 116:
         return jjMoveStringLiteralDfa12_0(active0, 0L, active1, 0x2000000000000L, active2, 0L, active3, 0L, active4, 0L, active5, 0L);
      case 120:
         return jjMoveStringLiteralDfa12_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x10000L, active4, 0L, active5, 0L);
      default :
         break;
   }
   return jjStartNfa_0(10, active0, active1, active2, active3, active4, active5);
}
static private int jjMoveStringLiteralDfa12_0(long old0, long active0, long old1, long active1, long old2, long active2, long old3, long active3, long old4, long active4, long old5, long active5)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2) | (active3 &= old3) | (active4 &= old4) | (active5 &= old5)) == 0L)
      return jjStartNfa_0(10, old0, old1, old2, old3, old4, old5);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(11, active0, active1, 0L, active3, active4, active5);
      return 12;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa13_0(active0, 0x8000000000L, active1, 0L, active3, 0L, active4, 0L, active5, 0L);
      case 98:
         return jjMoveStringLiteralDfa13_0(active0, 0L, active1, 0L, active3, 0x180000000000L, active4, 0L, active5, 0L);
      case 99:
         if ((active4 & 0x2000000000000L) != 0L)
            return jjStartNfaWithStates_0(12, 8, 133);
         else if ((active4 & 0x400000000000000L) != 0L)
            return jjStartNfaWithStates_0(12, 8, 133);
         else if ((active4 & 0x4000000000000000L) != 0L)
            return jjStartNfaWithStates_0(12, 8, 133);
         else if ((active4 & 0x8000000000000000L) != 0L)
            return jjStartNfaWithStates_0(12, 8, 133);
         return jjMoveStringLiteralDfa13_0(active0, 0L, active1, 0L, active3, 0L, active4, 0x1805080000000000L, active5, 0x1L);
      case 100:
         return jjMoveStringLiteralDfa13_0(active0, 0L, active1, 0L, active3, 0x400000000L, active4, 0L, active5, 0L);
      case 101:
         if ((active4 & 0x100000L) != 0L)
            return jjStartNfaWithStates_0(12, 8, 133);
         return jjMoveStringLiteralDfa13_0(active0, 0L, active1, 0L, active3, 0L, active4, 0x1000000L, active5, 0L);
      case 108:
         if ((active4 & 0x80000000L) != 0L)
            return jjStartNfaWithStates_0(12, 8, 133);
         return jjMoveStringLiteralDfa13_0(active0, 0L, active1, 0L, active3, 0L, active4, 0L, active5, 0x2L);
      case 109:
         return jjMoveStringLiteralDfa13_0(active0, 0L, active1, 0L, active3, 0L, active4, 0x18L, active5, 0L);
      case 110:
         return jjMoveStringLiteralDfa13_0(active0, 0x80000000000000L, active1, 0x100000000000L, active3, 0L, active4, 0L, active5, 0L);
      case 111:
         return jjMoveStringLiteralDfa13_0(active0, 0L, active1, 0L, active3, 0L, active4, 0x800800L, active5, 0L);
      case 112:
         return jjMoveStringLiteralDfa13_0(active0, 0L, active1, 0L, active3, 0L, active4, 0x800000000L, active5, 0L);
      case 114:
         if ((active1 & 0x400000000000L) != 0L)
            return jjStartNfaWithStates_0(12, 8, 133);
         else if ((active1 & 0x2000000000000L) != 0L)
            return jjStartNfaWithStates_0(12, 8, 133);
         return jjMoveStringLiteralDfa13_0(active0, 0L, active1, 0L, active3, 0L, active4, 0x400000L, active5, 0L);
      case 116:
         if ((active1 & 0x200000000000L) != 0L)
            return jjStartNfaWithStates_0(12, 8, 133);
         else if ((active1 & 0x8000000000000000L) != 0L)
            return jjStartNfaWithStates_0(12, 8, 133);
         return jjMoveStringLiteralDfa13_0(active0, 0L, active1, 0L, active3, 0x10000L, active4, 0x8000000000000L, active5, 0L);
      case 122:
         return jjMoveStringLiteralDfa13_0(active0, 0L, active1, 0x1000000L, active3, 0L, active4, 0L, active5, 0L);
      default :
         break;
   }
   return jjStartNfa_0(11, active0, active1, 0L, active3, active4, active5);
}
static private int jjMoveStringLiteralDfa13_0(long old0, long active0, long old1, long active1, long old3, long active3, long old4, long active4, long old5, long active5)
{
   if (((active0 &= old0) | (active1 &= old1) | (active3 &= old3) | (active4 &= old4) | (active5 &= old5)) == 0L)
      return jjStartNfa_0(11, old0, old1, 0L, old3, old4, old5);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(12, active0, active1, 0L, active3, active4, active5);
      return 13;
   }
   switch(curChar)
   {
      case 95:
         return jjMoveStringLiteralDfa14_0(active0, 0L, active1, 0L, active3, 0x400000000L, active4, 0L, active5, 0L);
      case 97:
         return jjMoveStringLiteralDfa14_0(active0, 0L, active1, 0L, active3, 0L, active4, 0x1000800L, active5, 0L);
      case 99:
         if ((active4 & 0x80000000000L) != 0L)
            return jjStartNfaWithStates_0(13, 8, 133);
         else if ((active4 & 0x1000000000000L) != 0L)
            return jjStartNfaWithStates_0(13, 8, 133);
         else if ((active4 & 0x4000000000000L) != 0L)
            return jjStartNfaWithStates_0(13, 8, 133);
         else if ((active4 & 0x800000000000000L) != 0L)
            return jjStartNfaWithStates_0(13, 8, 133);
         else if ((active4 & 0x1000000000000000L) != 0L)
            return jjStartNfaWithStates_0(13, 8, 133);
         else if ((active5 & 0x1L) != 0L)
            return jjStartNfaWithStates_0(13, 8, 133);
         return jjMoveStringLiteralDfa14_0(active0, 0L, active1, 0L, active3, 0L, active4, 0x8000800000000L, active5, 0L);
      case 101:
         return jjMoveStringLiteralDfa14_0(active0, 0L, active1, 0x1000000L, active3, 0x10000L, active4, 0x400018L, active5, 0L);
      case 105:
         return jjMoveStringLiteralDfa14_0(active0, 0x80000000000000L, active1, 0L, active3, 0L, active4, 0L, active5, 0L);
      case 108:
         return jjMoveStringLiteralDfa14_0(active0, 0L, active1, 0L, active3, 0x180000000000L, active4, 0L, active5, 0x2L);
      case 109:
         return jjMoveStringLiteralDfa14_0(active0, 0x8000000000L, active1, 0L, active3, 0L, active4, 0L, active5, 0L);
      case 114:
         return jjMoveStringLiteralDfa14_0(active0, 0L, active1, 0L, active3, 0L, active4, 0x800000L, active5, 0L);
      case 116:
         if ((active1 & 0x100000000000L) != 0L)
            return jjStartNfaWithStates_0(13, 8, 133);
         break;
      default :
         break;
   }
   return jjStartNfa_0(12, active0, active1, 0L, active3, active4, active5);
}
static private int jjMoveStringLiteralDfa14_0(long old0, long active0, long old1, long active1, long old3, long active3, long old4, long active4, long old5, long active5)
{
   if (((active0 &= old0) | (active1 &= old1) | (active3 &= old3) | (active4 &= old4) | (active5 &= old5)) == 0L)
      return jjStartNfa_0(12, old0, old1, 0L, old3, old4, old5);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(13, active0, active1, 0L, active3, active4, active5);
      return 14;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa15_0(active0, 0L, active1, 0L, active3, 0x400000000L, active4, 0L, active5, 0L);
      case 99:
         if ((active4 & 0x800000000L) != 0L)
            return jjStartNfaWithStates_0(14, 8, 133);
         else if ((active4 & 0x8000000000000L) != 0L)
            return jjStartNfaWithStates_0(14, 8, 133);
         return jjMoveStringLiteralDfa15_0(active0, 0L, active1, 0L, active3, 0L, active4, 0L, active5, 0x2L);
      case 100:
         if ((active4 & 0x1000000L) != 0L)
            return jjStartNfaWithStates_0(14, 8, 133);
         break;
      case 101:
         if ((active0 & 0x8000000000L) != 0L)
            return jjStartNfaWithStates_0(14, 8, 133);
         else if ((active3 & 0x80000000000L) != 0L)
         {
            jjmatchedKind = 8;
            jjmatchedPos = 14;
         }
         return jjMoveStringLiteralDfa15_0(active0, 0L, active1, 0L, active3, 0x100000000000L, active4, 0L, active5, 0L);
      case 109:
         return jjMoveStringLiteralDfa15_0(active0, 0L, active1, 0L, active3, 0L, active4, 0x18L, active5, 0L);
      case 114:
         if ((active1 & 0x1000000L) != 0L)
            return jjStartNfaWithStates_0(14, 8, 133);
         return jjMoveStringLiteralDfa15_0(active0, 0L, active1, 0L, active3, 0x10000L, active4, 0L, active5, 0L);
      case 115:
         return jjMoveStringLiteralDfa15_0(active0, 0L, active1, 0L, active3, 0L, active4, 0x400000L, active5, 0L);
      case 116:
         if ((active4 & 0x800L) != 0L)
            return jjStartNfaWithStates_0(14, 8, 133);
         return jjMoveStringLiteralDfa15_0(active0, 0x80000000000000L, active1, 0L, active3, 0L, active4, 0L, active5, 0L);
      case 121:
         if ((active4 & 0x800000L) != 0L)
            return jjStartNfaWithStates_0(14, 8, 133);
         break;
      default :
         break;
   }
   return jjStartNfa_0(13, active0, active1, 0L, active3, active4, active5);
}
static private int jjMoveStringLiteralDfa15_0(long old0, long active0, long old1, long active1, long old3, long active3, long old4, long active4, long old5, long active5)
{
   if (((active0 &= old0) | (active1 &= old1) | (active3 &= old3) | (active4 &= old4) | (active5 &= old5)) == 0L)
      return jjStartNfa_0(13, old0, old1, 0L, old3, old4, old5);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(14, active0, 0L, 0L, active3, active4, active5);
      return 15;
   }
   switch(curChar)
   {
      case 95:
         return jjMoveStringLiteralDfa16_0(active0, 0L, active3, 0x100000000000L, active4, 0x8L, active5, 0L);
      case 99:
         if ((active5 & 0x2L) != 0L)
            return jjStartNfaWithStates_0(15, 8, 133);
         break;
      case 100:
         return jjMoveStringLiteralDfa16_0(active0, 0L, active3, 0x400000000L, active4, 0L, active5, 0L);
      case 105:
         return jjMoveStringLiteralDfa16_0(active0, 0x80000000000000L, active3, 0L, active4, 0L, active5, 0L);
      case 110:
         return jjMoveStringLiteralDfa16_0(active0, 0L, active3, 0x10000L, active4, 0L, active5, 0L);
      case 111:
         return jjMoveStringLiteralDfa16_0(active0, 0L, active3, 0L, active4, 0x10L, active5, 0L);
      case 115:
         if ((active4 & 0x400000L) != 0L)
            return jjStartNfaWithStates_0(15, 8, 133);
         break;
      default :
         break;
   }
   return jjStartNfa_0(14, active0, 0L, 0L, active3, active4, active5);
}
static private int jjMoveStringLiteralDfa16_0(long old0, long active0, long old3, long active3, long old4, long active4, long old5, long active5)
{
   if (((active0 &= old0) | (active3 &= old3) | (active4 &= old4) | (active5 &= old5)) == 0L)
      return jjStartNfa_0(14, old0, 0L, 0L, old3, old4, old5);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(15, active0, 0L, 0L, active3, active4, 0L);
      return 16;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa17_0(active0, 0x80000000000000L, active3, 0x10000L, active4, 0L);
      case 100:
         return jjMoveStringLiteralDfa17_0(active0, 0L, active3, 0x400000000L, active4, 0L);
      case 110:
         return jjMoveStringLiteralDfa17_0(active0, 0L, active3, 0L, active4, 0x10L);
      case 111:
         return jjMoveStringLiteralDfa17_0(active0, 0L, active3, 0x100000000000L, active4, 0x8L);
      default :
         break;
   }
   return jjStartNfa_0(15, active0, 0L, 0L, active3, active4, 0L);
}
static private int jjMoveStringLiteralDfa17_0(long old0, long active0, long old3, long active3, long old4, long active4)
{
   if (((active0 &= old0) | (active3 &= old3) | (active4 &= old4)) == 0L)
      return jjStartNfa_0(15, old0, 0L, 0L, old3, old4, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(16, active0, 0L, 0L, active3, active4, 0L);
      return 17;
   }
   switch(curChar)
   {
      case 108:
         return jjMoveStringLiteralDfa18_0(active0, 0x80000000000000L, active3, 0x10000L, active4, 0x10L);
      case 114:
         if ((active3 & 0x400000000L) != 0L)
            return jjStartNfaWithStates_0(17, 8, 133);
         return jjMoveStringLiteralDfa18_0(active0, 0L, active3, 0x100000000000L, active4, 0x8L);
      default :
         break;
   }
   return jjStartNfa_0(16, active0, 0L, 0L, active3, active4, 0L);
}
static private int jjMoveStringLiteralDfa18_0(long old0, long active0, long old3, long active3, long old4, long active4)
{
   if (((active0 &= old0) | (active3 &= old3) | (active4 &= old4)) == 0L)
      return jjStartNfa_0(16, old0, 0L, 0L, old3, old4, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(17, active0, 0L, 0L, active3, active4, 0L);
      return 18;
   }
   switch(curChar)
   {
      case 95:
         return jjMoveStringLiteralDfa19_0(active0, 0L, active3, 0x100000000000L, active4, 0x8L);
      case 105:
         return jjMoveStringLiteralDfa19_0(active0, 0x80000000000000L, active3, 0L, active4, 0L);
      case 108:
         return jjMoveStringLiteralDfa19_0(active0, 0L, active3, 0x10000L, active4, 0L);
      case 121:
         if ((active4 & 0x10L) != 0L)
            return jjStartNfaWithStates_0(18, 8, 133);
         break;
      default :
         break;
   }
   return jjStartNfa_0(17, active0, 0L, 0L, active3, active4, 0L);
}
static private int jjMoveStringLiteralDfa19_0(long old0, long active0, long old3, long active3, long old4, long active4)
{
   if (((active0 &= old0) | (active3 &= old3) | (active4 &= old4)) == 0L)
      return jjStartNfa_0(17, old0, 0L, 0L, old3, old4, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(18, active0, 0L, 0L, active3, active4, 0L);
      return 19;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa20_0(active0, 0L, active3, 0L, active4, 0x8L);
      case 110:
         return jjMoveStringLiteralDfa20_0(active0, 0L, active3, 0x100000000000L, active4, 0L);
      case 121:
         if ((active3 & 0x10000L) != 0L)
            return jjStartNfaWithStates_0(19, 8, 133);
         break;
      case 122:
         return jjMoveStringLiteralDfa20_0(active0, 0x80000000000000L, active3, 0L, active4, 0L);
      default :
         break;
   }
   return jjStartNfa_0(18, active0, 0L, 0L, active3, active4, 0L);
}
static private int jjMoveStringLiteralDfa20_0(long old0, long active0, long old3, long active3, long old4, long active4)
{
   if (((active0 &= old0) | (active3 &= old3) | (active4 &= old4)) == 0L)
      return jjStartNfa_0(18, old0, 0L, 0L, old3, old4, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(19, active0, 0L, 0L, active3, active4, 0L);
      return 20;
   }
   switch(curChar)
   {
      case 101:
         return jjMoveStringLiteralDfa21_0(active0, 0x80000000000000L, active3, 0L, active4, 0L);
      case 114:
         return jjMoveStringLiteralDfa21_0(active0, 0L, active3, 0L, active4, 0x8L);
      case 117:
         return jjMoveStringLiteralDfa21_0(active0, 0L, active3, 0x100000000000L, active4, 0L);
      default :
         break;
   }
   return jjStartNfa_0(19, active0, 0L, 0L, active3, active4, 0L);
}
static private int jjMoveStringLiteralDfa21_0(long old0, long active0, long old3, long active3, long old4, long active4)
{
   if (((active0 &= old0) | (active3 &= old3) | (active4 &= old4)) == 0L)
      return jjStartNfa_0(19, old0, 0L, 0L, old3, old4, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(20, active0, 0L, 0L, active3, active4, 0L);
      return 21;
   }
   switch(curChar)
   {
      case 100:
         if ((active0 & 0x80000000000000L) != 0L)
            return jjStartNfaWithStates_0(21, 8, 133);
         break;
      case 103:
         return jjMoveStringLiteralDfa22_0(active0, 0L, active3, 0L, active4, 0x8L);
      case 108:
         return jjMoveStringLiteralDfa22_0(active0, 0L, active3, 0x100000000000L, active4, 0L);
      default :
         break;
   }
   return jjStartNfa_0(20, active0, 0L, 0L, active3, active4, 0L);
}
static private int jjMoveStringLiteralDfa22_0(long old0, long active0, long old3, long active3, long old4, long active4)
{
   if (((active0 &= old0) | (active3 &= old3) | (active4 &= old4)) == 0L)
      return jjStartNfa_0(20, old0, 0L, 0L, old3, old4, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(21, 0L, 0L, 0L, active3, active4, 0L);
      return 22;
   }
   switch(curChar)
   {
      case 108:
         if ((active3 & 0x100000000000L) != 0L)
            return jjStartNfaWithStates_0(22, 8, 133);
         break;
      case 109:
         return jjMoveStringLiteralDfa23_0(active3, 0L, active4, 0x8L);
      default :
         break;
   }
   return jjStartNfa_0(21, 0L, 0L, 0L, active3, active4, 0L);
}
static private int jjMoveStringLiteralDfa23_0(long old3, long active3, long old4, long active4)
{
   if (((active3 &= old3) | (active4 &= old4)) == 0L)
      return jjStartNfa_0(21, 0L, 0L, 0L, old3, old4, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(22, 0L, 0L, 0L, 0L, active4, 0L);
      return 23;
   }
   switch(curChar)
   {
      case 101:
         return jjMoveStringLiteralDfa24_0(active4, 0x8L);
      default :
         break;
   }
   return jjStartNfa_0(22, 0L, 0L, 0L, 0L, active4, 0L);
}
static private int jjMoveStringLiteralDfa24_0(long old4, long active4)
{
   if (((active4 &= old4)) == 0L)
      return jjStartNfa_0(22, 0L, 0L, 0L, 0L, old4, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(23, 0L, 0L, 0L, 0L, active4, 0L);
      return 24;
   }
   switch(curChar)
   {
      case 109:
         return jjMoveStringLiteralDfa25_0(active4, 0x8L);
      default :
         break;
   }
   return jjStartNfa_0(23, 0L, 0L, 0L, 0L, active4, 0L);
}
static private int jjMoveStringLiteralDfa25_0(long old4, long active4)
{
   if (((active4 &= old4)) == 0L)
      return jjStartNfa_0(23, 0L, 0L, 0L, 0L, old4, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(24, 0L, 0L, 0L, 0L, active4, 0L);
      return 25;
   }
   switch(curChar)
   {
      case 111:
         return jjMoveStringLiteralDfa26_0(active4, 0x8L);
      default :
         break;
   }
   return jjStartNfa_0(24, 0L, 0L, 0L, 0L, active4, 0L);
}
static private int jjMoveStringLiteralDfa26_0(long old4, long active4)
{
   if (((active4 &= old4)) == 0L)
      return jjStartNfa_0(24, 0L, 0L, 0L, 0L, old4, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(25, 0L, 0L, 0L, 0L, active4, 0L);
      return 26;
   }
   switch(curChar)
   {
      case 110:
         return jjMoveStringLiteralDfa27_0(active4, 0x8L);
      default :
         break;
   }
   return jjStartNfa_0(25, 0L, 0L, 0L, 0L, active4, 0L);
}
static private int jjMoveStringLiteralDfa27_0(long old4, long active4)
{
   if (((active4 &= old4)) == 0L)
      return jjStartNfa_0(25, 0L, 0L, 0L, 0L, old4, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(26, 0L, 0L, 0L, 0L, active4, 0L);
      return 27;
   }
   switch(curChar)
   {
      case 108:
         return jjMoveStringLiteralDfa28_0(active4, 0x8L);
      default :
         break;
   }
   return jjStartNfa_0(26, 0L, 0L, 0L, 0L, active4, 0L);
}
static private int jjMoveStringLiteralDfa28_0(long old4, long active4)
{
   if (((active4 &= old4)) == 0L)
      return jjStartNfa_0(26, 0L, 0L, 0L, 0L, old4, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(27, 0L, 0L, 0L, 0L, active4, 0L);
      return 28;
   }
   switch(curChar)
   {
      case 121:
         if ((active4 & 0x8L) != 0L)
            return jjStartNfaWithStates_0(28, 8, 133);
         break;
      default :
         break;
   }
   return jjStartNfa_0(27, 0L, 0L, 0L, 0L, active4, 0L);
}
static private int jjStartNfaWithStates_0(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_0(state, pos + 1);
}
static final long[] jjbitVec0 = {
   0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL
};
static private int jjMoveNfa_0(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 133;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 134:
                  if ((0x3ff601000000000L & l) != 0L)
                     jjCheckNAddTwoStates(10, 11);
                  else if (curChar == 58)
                  {
                     if (kind > 18)
                        kind = 18;
                  }
                  if ((0x3ff601000000000L & l) != 0L)
                  {
                     if (kind > 9)
                        kind = 9;
                     jjCheckNAdd(25);
                  }
                  if ((0x3ff601000000000L & l) != 0L)
                  {
                     if (kind > 8)
                        kind = 8;
                     jjCheckNAdd(23);
                  }
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 38)
                        kind = 38;
                     jjCheckNAdd(21);
                  }
                  break;
               case 133:
                  if ((0x3ff601000000000L & l) != 0L)
                     jjCheckNAddTwoStates(10, 11);
                  else if (curChar == 58)
                  {
                     if (kind > 18)
                        kind = 18;
                  }
                  if ((0x3ff601000000000L & l) != 0L)
                  {
                     if (kind > 9)
                        kind = 9;
                     jjCheckNAdd(25);
                  }
                  if ((0x3ff601000000000L & l) != 0L)
                  {
                     if (kind > 8)
                        kind = 8;
                     jjCheckNAdd(23);
                  }
                  break;
               case 0:
                  if ((0x3ff601000000000L & l) != 0L)
                     jjCheckNAddTwoStates(10, 11);
                  else if ((0x100002600L & l) != 0L)
                  {
                     if (kind > 7)
                        kind = 7;
                  }
                  else if (curChar == 33)
                     jjCheckNAddTwoStates(85, 87);
                  else if (curChar == 37)
                     jjCheckNAddStates(0, 5);
                  else if (curChar == 34)
                     jjCheckNAddStates(6, 13);
                  else if (curChar == 35)
                     jjCheckNAdd(13);
                  else if (curChar == 59)
                     jjCheckNAddTwoStates(3, 4);
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 4)
                        kind = 4;
                     jjCheckNAddStates(14, 25);
                  }
                  else if ((0x601000000000L & l) != 0L)
                  {
                     if (kind > 3)
                        kind = 3;
                     jjCheckNAdd(25);
                  }
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 5)
                        kind = 5;
                  }
                  else if ((0x601000000000L & l) != 0L)
                  {
                     if (kind > 2)
                        kind = 2;
                     jjCheckNAdd(23);
                  }
                  if ((0x280000000000L & l) != 0L)
                  {
                     if (kind > 28)
                        kind = 28;
                     jjCheckNAddStates(26, 29);
                  }
                  else if (curChar == 48)
                     jjAddStates(30, 44);
                  else if (curChar == 36)
                     jjAddStates(45, 46);
                  if (curChar == 45)
                     jjCheckNAddTwoStates(28, 29);
                  break;
               case 85:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 22)
                        kind = 22;
                     jjCheckNAdd(87);
                  }
                  else if ((0x601000000000L & l) != 0L)
                  {
                     if (kind > 21)
                        kind = 21;
                     jjCheckNAdd(86);
                  }
                  break;
               case 1:
                  if ((0x3ff000000000000L & l) != 0L && kind > 5)
                     kind = 5;
                  break;
               case 2:
                  if (curChar == 59)
                     jjCheckNAddTwoStates(3, 4);
                  break;
               case 3:
                  if ((0xfffffffffffffbffL & l) != 0L)
                     jjCheckNAddTwoStates(3, 4);
                  break;
               case 4:
                  if (curChar == 10 && kind > 6)
                     kind = 6;
                  break;
               case 5:
                  if (curChar == 48 && kind > 7)
                     kind = 7;
                  break;
               case 6:
                  if (curChar == 48)
                     jjstateSet[jjnewStateCnt++] = 5;
                  break;
               case 9:
                  if ((0x100002600L & l) != 0L && kind > 7)
                     kind = 7;
                  break;
               case 10:
                  if ((0x3ff601000000000L & l) != 0L)
                     jjCheckNAddTwoStates(10, 11);
                  break;
               case 11:
                  if (curChar == 58 && kind > 18)
                     kind = 18;
                  break;
               case 12:
                  if (curChar == 35)
                     jjCheckNAdd(13);
                  break;
               case 13:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 19)
                     kind = 19;
                  jjCheckNAdd(13);
                  break;
               case 14:
                  if (curChar == 36)
                     jjAddStates(45, 46);
                  break;
               case 15:
                  if ((0x601000000000L & l) == 0L)
                     break;
                  if (kind > 20)
                     kind = 20;
                  jjCheckNAdd(16);
                  break;
               case 16:
                  if ((0x3ff601000000000L & l) == 0L)
                     break;
                  if (kind > 20)
                     kind = 20;
                  jjCheckNAdd(16);
                  break;
               case 17:
                  if (curChar == 34)
                     jjCheckNAddTwoStates(18, 19);
                  break;
               case 18:
                  if ((0xfffffffbffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(18, 19);
                  break;
               case 19:
                  if (curChar == 34 && kind > 20)
                     kind = 20;
                  break;
               case 21:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 38)
                     kind = 38;
                  jjCheckNAdd(21);
                  break;
               case 22:
                  if ((0x601000000000L & l) == 0L)
                     break;
                  if (kind > 2)
                     kind = 2;
                  jjCheckNAdd(23);
                  break;
               case 23:
                  if ((0x3ff601000000000L & l) == 0L)
                     break;
                  if (kind > 8)
                     kind = 8;
                  jjCheckNAdd(23);
                  break;
               case 24:
                  if ((0x601000000000L & l) == 0L)
                     break;
                  if (kind > 3)
                     kind = 3;
                  jjCheckNAdd(25);
                  break;
               case 25:
                  if ((0x3ff601000000000L & l) == 0L)
                     break;
                  if (kind > 9)
                     kind = 9;
                  jjCheckNAdd(25);
                  break;
               case 26:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 4)
                     kind = 4;
                  jjCheckNAddStates(14, 25);
                  break;
               case 27:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 11)
                     kind = 11;
                  jjCheckNAdd(27);
                  break;
               case 28:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 23)
                     kind = 23;
                  jjCheckNAdd(28);
                  break;
               case 29:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 24)
                     kind = 24;
                  jjCheckNAdd(29);
                  break;
               case 30:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 25)
                     kind = 25;
                  jjCheckNAdd(30);
                  break;
               case 31:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(31, 32);
                  break;
               case 32:
                  if (curChar != 46)
                     break;
                  if (kind > 26)
                     kind = 26;
                  jjCheckNAdd(33);
                  break;
               case 33:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 26)
                     kind = 26;
                  jjCheckNAdd(33);
                  break;
               case 34:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(34, 35);
                  break;
               case 35:
                  if (curChar == 46)
                     jjCheckNAddTwoStates(36, 37);
                  break;
               case 36:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(36, 37);
                  break;
               case 38:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(39);
                  break;
               case 39:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 26)
                     kind = 26;
                  jjCheckNAdd(39);
                  break;
               case 40:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(40, 41);
                  break;
               case 41:
                  if (curChar != 46)
                     break;
                  if (kind > 27)
                     kind = 27;
                  jjCheckNAdd(42);
                  break;
               case 42:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 27)
                     kind = 27;
                  jjCheckNAdd(42);
                  break;
               case 43:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(43, 44);
                  break;
               case 44:
                  if (curChar == 46)
                     jjCheckNAddTwoStates(45, 46);
                  break;
               case 45:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(45, 46);
                  break;
               case 47:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(48);
                  break;
               case 48:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 29)
                     kind = 29;
                  jjCheckNAdd(48);
                  break;
               case 49:
                  if (curChar == 34)
                     jjCheckNAddStates(6, 13);
                  break;
               case 50:
                  if ((0xfffffffbffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(50, 51);
                  break;
               case 51:
                  if (curChar == 34 && kind > 10)
                     kind = 10;
                  break;
               case 52:
                  if ((0xfffffffbffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(52, 53);
                  break;
               case 53:
                  if (curChar == 34)
                     jjCheckNAdd(11);
                  break;
               case 54:
                  if ((0xfffffffbffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(54, 55);
                  break;
               case 55:
                  if (curChar == 34 && kind > 36)
                     kind = 36;
                  break;
               case 56:
                  if ((0xfffffffbffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(56, 57);
                  break;
               case 57:
                  if (curChar == 34 && kind > 37)
                     kind = 37;
                  break;
               case 59:
                  if ((0x601000000000L & l) == 0L)
                     break;
                  if (kind > 12)
                     kind = 12;
                  jjCheckNAdd(60);
                  break;
               case 60:
                  if ((0x3ff601000000000L & l) == 0L)
                     break;
                  if (kind > 12)
                     kind = 12;
                  jjCheckNAdd(60);
                  break;
               case 61:
                  if (curChar == 34)
                     jjCheckNAddTwoStates(62, 63);
                  break;
               case 62:
                  if ((0xfffffffbffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(62, 63);
                  break;
               case 63:
                  if (curChar == 34 && kind > 12)
                     kind = 12;
                  break;
               case 64:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 12)
                     kind = 12;
                  jjstateSet[jjnewStateCnt++] = 64;
                  break;
               case 65:
                  if ((0x601000000000L & l) == 0L)
                     break;
                  if (kind > 13)
                     kind = 13;
                  jjCheckNAdd(66);
                  break;
               case 66:
                  if ((0x3ff601000000000L & l) == 0L)
                     break;
                  if (kind > 13)
                     kind = 13;
                  jjCheckNAdd(66);
                  break;
               case 67:
                  if (curChar == 34)
                     jjCheckNAddTwoStates(68, 69);
                  break;
               case 68:
                  if ((0xfffffffbffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(68, 69);
                  break;
               case 69:
                  if (curChar == 34 && kind > 13)
                     kind = 13;
                  break;
               case 70:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 14)
                     kind = 14;
                  jjstateSet[jjnewStateCnt++] = 70;
                  break;
               case 71:
                  if (curChar == 37)
                     jjCheckNAddStates(0, 5);
                  break;
               case 72:
                  if ((0x601000000000L & l) == 0L)
                     break;
                  if (kind > 15)
                     kind = 15;
                  jjCheckNAdd(73);
                  break;
               case 73:
                  if ((0x3ff601000000000L & l) == 0L)
                     break;
                  if (kind > 15)
                     kind = 15;
                  jjCheckNAdd(73);
                  break;
               case 74:
                  if (curChar == 34)
                     jjCheckNAddTwoStates(75, 76);
                  break;
               case 75:
                  if ((0xfffffffbffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(75, 76);
                  break;
               case 76:
                  if (curChar == 34 && kind > 15)
                     kind = 15;
                  break;
               case 77:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 15)
                     kind = 15;
                  jjCheckNAdd(77);
                  break;
               case 78:
                  if ((0x601000000000L & l) == 0L)
                     break;
                  if (kind > 16)
                     kind = 16;
                  jjCheckNAdd(79);
                  break;
               case 79:
                  if ((0x3ff601000000000L & l) == 0L)
                     break;
                  if (kind > 16)
                     kind = 16;
                  jjCheckNAdd(79);
                  break;
               case 80:
                  if (curChar == 34)
                     jjCheckNAddTwoStates(81, 82);
                  break;
               case 81:
                  if ((0xfffffffbffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(81, 82);
                  break;
               case 82:
                  if (curChar == 34 && kind > 16)
                     kind = 16;
                  break;
               case 83:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 17)
                     kind = 17;
                  jjCheckNAdd(83);
                  break;
               case 84:
                  if (curChar == 33)
                     jjCheckNAddTwoStates(85, 87);
                  break;
               case 86:
                  if ((0x3ff601000000000L & l) == 0L)
                     break;
                  if (kind > 21)
                     kind = 21;
                  jjCheckNAdd(86);
                  break;
               case 87:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 22)
                     kind = 22;
                  jjCheckNAdd(87);
                  break;
               case 88:
                  if (curChar == 45)
                     jjCheckNAddTwoStates(28, 29);
                  break;
               case 89:
                  if ((0x280000000000L & l) == 0L)
                     break;
                  if (kind > 28)
                     kind = 28;
                  jjCheckNAddStates(26, 29);
                  break;
               case 90:
                  if (curChar == 48)
                     jjAddStates(30, 44);
                  break;
               case 93:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 26)
                     kind = 26;
                  jjstateSet[jjnewStateCnt++] = 93;
                  break;
               case 96:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 26)
                     kind = 26;
                  jjstateSet[jjnewStateCnt++] = 96;
                  break;
               case 99:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 26)
                     kind = 26;
                  jjstateSet[jjnewStateCnt++] = 99;
                  break;
               case 102:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 26)
                     kind = 26;
                  jjstateSet[jjnewStateCnt++] = 102;
                  break;
               case 104:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 26)
                     kind = 26;
                  jjstateSet[jjnewStateCnt++] = 104;
                  break;
               case 106:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 30)
                     kind = 30;
                  jjstateSet[jjnewStateCnt++] = 106;
                  break;
               case 109:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 31)
                     kind = 31;
                  jjstateSet[jjnewStateCnt++] = 109;
                  break;
               case 112:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 32)
                     kind = 32;
                  jjstateSet[jjnewStateCnt++] = 112;
                  break;
               case 115:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 33)
                     kind = 33;
                  jjstateSet[jjnewStateCnt++] = 115;
                  break;
               case 118:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 34)
                     kind = 34;
                  jjstateSet[jjnewStateCnt++] = 118;
                  break;
               case 120:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 35)
                     kind = 35;
                  jjstateSet[jjnewStateCnt++] = 120;
                  break;
               case 123:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 35)
                     kind = 35;
                  jjstateSet[jjnewStateCnt++] = 123;
                  break;
               case 126:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 35)
                     kind = 35;
                  jjstateSet[jjnewStateCnt++] = 126;
                  break;
               case 129:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 35)
                     kind = 35;
                  jjstateSet[jjnewStateCnt++] = 129;
                  break;
               case 132:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 35)
                     kind = 35;
                  jjstateSet[jjnewStateCnt++] = 132;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 134:
                  if ((0x7fffffe97fffffeL & l) != 0L)
                  {
                     if (kind > 9)
                        kind = 9;
                     jjCheckNAdd(25);
                  }
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjCheckNAddTwoStates(10, 11);
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 8)
                        kind = 8;
                     jjCheckNAdd(23);
                  }
                  break;
               case 133:
                  if ((0x7fffffe97fffffeL & l) != 0L)
                  {
                     if (kind > 9)
                        kind = 9;
                     jjCheckNAdd(25);
                  }
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjCheckNAddTwoStates(10, 11);
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 8)
                        kind = 8;
                     jjCheckNAdd(23);
                  }
                  break;
               case 0:
                  if ((0x7fffffe97fffffeL & l) != 0L)
                  {
                     if (kind > 3)
                        kind = 3;
                     jjCheckNAdd(25);
                  }
                  else if (curChar == 64)
                     jjAddStates(47, 52);
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 2)
                        kind = 2;
                     jjCheckNAdd(23);
                  }
                  else if (curChar == 92)
                     jjstateSet[jjnewStateCnt++] = 7;
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjCheckNAddTwoStates(10, 11);
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 1)
                        kind = 1;
                  }
                  if ((0x7e0000007eL & l) != 0L)
                  {
                     if (kind > 5)
                        kind = 5;
                  }
                  else if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 21;
                  break;
               case 85:
               case 86:
                  if ((0x7fffffe97fffffeL & l) == 0L)
                     break;
                  if (kind > 21)
                     kind = 21;
                  jjCheckNAdd(86);
                  break;
               case 1:
                  if ((0x7e0000007eL & l) != 0L && kind > 5)
                     kind = 5;
                  break;
               case 3:
                  jjAddStates(53, 54);
                  break;
               case 7:
                  if (curChar == 120)
                     jjstateSet[jjnewStateCnt++] = 6;
                  break;
               case 8:
                  if (curChar == 92)
                     jjstateSet[jjnewStateCnt++] = 7;
                  break;
               case 10:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjCheckNAddTwoStates(10, 11);
                  break;
               case 15:
               case 16:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 20)
                     kind = 20;
                  jjCheckNAdd(16);
                  break;
               case 18:
                  jjAddStates(55, 56);
                  break;
               case 20:
                  if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 21;
                  break;
               case 22:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 2)
                     kind = 2;
                  jjCheckNAdd(23);
                  break;
               case 23:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 8)
                     kind = 8;
                  jjCheckNAdd(23);
                  break;
               case 24:
                  if ((0x7fffffe97fffffeL & l) == 0L)
                     break;
                  if (kind > 3)
                     kind = 3;
                  jjCheckNAdd(25);
                  break;
               case 25:
                  if ((0x7fffffe97fffffeL & l) == 0L)
                     break;
                  if (kind > 9)
                     kind = 9;
                  jjCheckNAdd(25);
                  break;
               case 37:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(57, 58);
                  break;
               case 46:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(59, 60);
                  break;
               case 50:
                  jjAddStates(61, 62);
                  break;
               case 52:
                  jjAddStates(63, 64);
                  break;
               case 54:
                  jjAddStates(65, 66);
                  break;
               case 56:
                  jjAddStates(67, 68);
                  break;
               case 58:
                  if (curChar == 64)
                     jjAddStates(47, 52);
                  break;
               case 59:
               case 60:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 12)
                     kind = 12;
                  jjCheckNAdd(60);
                  break;
               case 62:
                  jjAddStates(69, 70);
                  break;
               case 65:
               case 66:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 13)
                     kind = 13;
                  jjCheckNAdd(66);
                  break;
               case 68:
                  jjAddStates(71, 72);
                  break;
               case 72:
               case 73:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 15)
                     kind = 15;
                  jjCheckNAdd(73);
                  break;
               case 75:
                  jjAddStates(73, 74);
                  break;
               case 78:
               case 79:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 16)
                     kind = 16;
                  jjCheckNAdd(79);
                  break;
               case 81:
                  jjAddStates(75, 76);
                  break;
               case 91:
                  if (curChar == 120)
                     jjstateSet[jjnewStateCnt++] = 92;
                  break;
               case 92:
                  if (curChar != 72)
                     break;
                  if (kind > 26)
                     kind = 26;
                  jjCheckNAdd(93);
                  break;
               case 93:
                  if ((0x7e0000007eL & l) == 0L)
                     break;
                  if (kind > 26)
                     kind = 26;
                  jjCheckNAdd(93);
                  break;
               case 94:
                  if (curChar == 120)
                     jjstateSet[jjnewStateCnt++] = 95;
                  break;
               case 95:
                  if (curChar != 77)
                     break;
                  if (kind > 26)
                     kind = 26;
                  jjCheckNAdd(96);
                  break;
               case 96:
                  if ((0x7e0000007eL & l) == 0L)
                     break;
                  if (kind > 26)
                     kind = 26;
                  jjCheckNAdd(96);
                  break;
               case 97:
                  if (curChar == 120)
                     jjstateSet[jjnewStateCnt++] = 98;
                  break;
               case 98:
                  if (curChar != 76)
                     break;
                  if (kind > 26)
                     kind = 26;
                  jjCheckNAdd(99);
                  break;
               case 99:
                  if ((0x7e0000007eL & l) == 0L)
                     break;
                  if (kind > 26)
                     kind = 26;
                  jjCheckNAdd(99);
                  break;
               case 100:
                  if (curChar == 120)
                     jjstateSet[jjnewStateCnt++] = 101;
                  break;
               case 101:
                  if (curChar != 75)
                     break;
                  if (kind > 26)
                     kind = 26;
                  jjCheckNAdd(102);
                  break;
               case 102:
                  if ((0x7e0000007eL & l) == 0L)
                     break;
                  if (kind > 26)
                     kind = 26;
                  jjCheckNAdd(102);
                  break;
               case 103:
                  if (curChar != 120)
                     break;
                  if (kind > 26)
                     kind = 26;
                  jjCheckNAdd(104);
                  break;
               case 104:
                  if ((0x7e0000007eL & l) == 0L)
                     break;
                  if (kind > 26)
                     kind = 26;
                  jjCheckNAdd(104);
                  break;
               case 105:
                  if (curChar != 120)
                     break;
                  if (kind > 30)
                     kind = 30;
                  jjCheckNAdd(106);
                  break;
               case 106:
                  if ((0x7e0000007eL & l) == 0L)
                     break;
                  if (kind > 30)
                     kind = 30;
                  jjCheckNAdd(106);
                  break;
               case 107:
                  if (curChar == 120)
                     jjstateSet[jjnewStateCnt++] = 108;
                  break;
               case 108:
                  if (curChar != 75)
                     break;
                  if (kind > 31)
                     kind = 31;
                  jjCheckNAdd(109);
                  break;
               case 109:
                  if ((0x7e0000007eL & l) == 0L)
                     break;
                  if (kind > 31)
                     kind = 31;
                  jjCheckNAdd(109);
                  break;
               case 110:
                  if (curChar == 120)
                     jjstateSet[jjnewStateCnt++] = 111;
                  break;
               case 111:
                  if (curChar != 76)
                     break;
                  if (kind > 32)
                     kind = 32;
                  jjCheckNAdd(112);
                  break;
               case 112:
                  if ((0x7e0000007eL & l) == 0L)
                     break;
                  if (kind > 32)
                     kind = 32;
                  jjCheckNAdd(112);
                  break;
               case 113:
                  if (curChar == 120)
                     jjstateSet[jjnewStateCnt++] = 114;
                  break;
               case 114:
                  if (curChar != 77)
                     break;
                  if (kind > 33)
                     kind = 33;
                  jjCheckNAdd(115);
                  break;
               case 115:
                  if ((0x7e0000007eL & l) == 0L)
                     break;
                  if (kind > 33)
                     kind = 33;
                  jjCheckNAdd(115);
                  break;
               case 116:
                  if (curChar == 120)
                     jjstateSet[jjnewStateCnt++] = 117;
                  break;
               case 117:
                  if (curChar != 72)
                     break;
                  if (kind > 34)
                     kind = 34;
                  jjCheckNAdd(118);
                  break;
               case 118:
                  if ((0x7e0000007eL & l) == 0L)
                     break;
                  if (kind > 34)
                     kind = 34;
                  jjCheckNAdd(118);
                  break;
               case 119:
                  if (curChar != 120)
                     break;
                  if (kind > 35)
                     kind = 35;
                  jjCheckNAdd(120);
                  break;
               case 120:
                  if ((0x7e0000007eL & l) == 0L)
                     break;
                  if (kind > 35)
                     kind = 35;
                  jjCheckNAdd(120);
                  break;
               case 121:
                  if (curChar == 120)
                     jjstateSet[jjnewStateCnt++] = 122;
                  break;
               case 122:
                  if (curChar != 75)
                     break;
                  if (kind > 35)
                     kind = 35;
                  jjCheckNAdd(123);
                  break;
               case 123:
                  if ((0x7e0000007eL & l) == 0L)
                     break;
                  if (kind > 35)
                     kind = 35;
                  jjCheckNAdd(123);
                  break;
               case 124:
                  if (curChar == 120)
                     jjstateSet[jjnewStateCnt++] = 125;
                  break;
               case 125:
                  if (curChar != 76)
                     break;
                  if (kind > 35)
                     kind = 35;
                  jjCheckNAdd(126);
                  break;
               case 126:
                  if ((0x7e0000007eL & l) == 0L)
                     break;
                  if (kind > 35)
                     kind = 35;
                  jjCheckNAdd(126);
                  break;
               case 127:
                  if (curChar == 120)
                     jjstateSet[jjnewStateCnt++] = 128;
                  break;
               case 128:
                  if (curChar != 77)
                     break;
                  if (kind > 35)
                     kind = 35;
                  jjCheckNAdd(129);
                  break;
               case 129:
                  if ((0x7e0000007eL & l) == 0L)
                     break;
                  if (kind > 35)
                     kind = 35;
                  jjCheckNAdd(129);
                  break;
               case 130:
                  if (curChar == 120)
                     jjstateSet[jjnewStateCnt++] = 131;
                  break;
               case 131:
                  if (curChar != 72)
                     break;
                  if (kind > 35)
                     kind = 35;
                  jjCheckNAdd(132);
                  break;
               case 132:
                  if ((0x7e0000007eL & l) == 0L)
                     break;
                  if (kind > 35)
                     kind = 35;
                  jjCheckNAdd(132);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 3:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjAddStates(53, 54);
                  break;
               case 18:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjAddStates(55, 56);
                  break;
               case 50:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjAddStates(61, 62);
                  break;
               case 52:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjAddStates(63, 64);
                  break;
               case 54:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjAddStates(65, 66);
                  break;
               case 56:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjAddStates(67, 68);
                  break;
               case 62:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjAddStates(69, 70);
                  break;
               case 68:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjAddStates(71, 72);
                  break;
               case 75:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjAddStates(73, 74);
                  break;
               case 81:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjAddStates(75, 76);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 133 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
static final int[] jjnextStates = {
   72, 74, 77, 78, 80, 83, 50, 51, 52, 53, 54, 55, 56, 57, 27, 28, 
   29, 30, 31, 32, 34, 35, 40, 41, 43, 44, 31, 34, 40, 43, 91, 94, 
   97, 100, 103, 105, 107, 110, 113, 116, 119, 121, 124, 127, 130, 15, 17, 59, 
   61, 64, 65, 67, 70, 3, 4, 18, 19, 38, 39, 47, 48, 50, 51, 52, 
   53, 54, 55, 56, 57, 62, 63, 68, 69, 75, 76, 81, 82, 
};

/** Token literal values. */
public static final String[] jjstrLiteralImages = {
"", null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, 
"\163\157\165\162\143\145\137\146\151\154\145\156\141\155\145", "\75", "\164\141\162\147\145\164", "\144\141\164\141\154\141\171\157\165\164", 
"\164\162\151\160\154\145", "\155\157\144\165\154\145", "\141\163\155", "\164\171\160\145", 
"\157\160\141\161\165\145", "\143\157\155\144\141\164", "\141\156\171", 
"\145\170\141\143\164\155\141\164\143\150", "\154\141\162\147\145\163\164", 
"\156\157\144\165\160\154\151\143\141\164\145\163", "\163\141\155\145\163\151\172\145", "\54", 
"\145\170\164\145\162\156\141\154\154\171\137\151\156\151\164\151\141\154\151\172\145\144", "\143\157\156\163\164\141\156\164", "\147\154\157\142\141\154", 
"\144\145\143\154\141\162\145", "\144\145\146\151\156\145", "\50", "\51", "\56\56\56", "\173", "\175", 
"\141\164\164\162\151\142\165\164\145\163", "\41", "\144\151\163\164\151\156\143\164", "\166\157\151\144", 
"\150\141\154\146", "\146\154\157\141\164", "\144\157\165\142\154\145", "\146\160\61\62\70", 
"\170\70\66\137\146\160\70\60", "\160\160\143\137\146\160\61\62\70", "\52", 
"\141\144\144\162\163\160\141\143\145", "\74", "\170", "\76", "\154\141\142\145\154", 
"\155\145\164\141\144\141\164\141", "\133", "\135", "\164\162\165\145", "\146\141\154\163\145", 
"\156\165\154\154", "\143", "\172\145\162\157\151\156\151\164\151\141\154\151\172\145\162", 
"\165\156\144\145\146", "\141\144\144", "\146\141\144\144", "\163\165\142", "\146\163\165\142", 
"\155\165\154", "\146\155\165\154", "\165\144\151\166", "\163\144\151\166", 
"\146\144\151\166", "\165\162\145\155", "\163\162\145\155", "\146\162\145\155", "\163\150\154", 
"\154\163\150\162", "\141\163\150\162", "\141\156\144", "\157\162", "\170\157\162", 
"\145\170\164\162\141\143\164\145\154\145\155\145\156\164", "\151\156\163\145\162\164\145\154\145\155\145\156\164", 
"\163\150\165\146\146\154\145\166\145\143\164\157\162", "\145\170\164\162\141\143\164\166\141\154\165\145", 
"\151\156\163\145\162\164\166\141\154\165\145", "\147\145\164\145\154\145\155\145\156\164\160\164\162", 
"\164\162\165\156\143", "\164\157", "\172\145\170\164", "\163\145\170\164", 
"\146\160\164\162\165\156\143", "\146\160\145\170\164", "\146\160\164\157\165\151", 
"\146\160\164\157\163\151", "\165\151\164\157\146\160", "\163\151\164\157\146\160", 
"\160\164\162\164\157\151\156\164", "\151\156\164\164\157\160\164\162", "\142\151\164\143\141\163\164", 
"\141\144\144\162\163\160\141\143\145\143\141\163\164", "\151\143\155\160", "\146\143\155\160", "\163\145\154\145\143\164", 
"\156\165\167", "\156\163\167", "\141\162\143\160", "\146\141\163\164", "\156\151\156\146", 
"\156\156\141\156", "\156\163\172", "\145\170\141\143\164", "\141\154\154\157\143\141", 
"\154\157\141\144", "\166\157\154\141\164\151\154\145", "\163\164\157\162\145", 
"\146\145\156\143\145", "\163\151\156\147\154\145\164\150\162\145\141\144", 
"\141\143\161\137\162\145\154", "\141\143\161\165\151\162\145", "\155\157\156\157\164\157\156\151\143", 
"\162\145\154\145\141\163\145", "\163\145\161\137\143\163\164", "\165\156\157\162\144\145\162\145\144", 
"\143\155\160\170\143\150\147", "\167\145\141\153", "\141\164\157\155\151\143\162\155\167", "\155\141\170", 
"\155\151\156", "\156\141\156\144", "\165\155\141\170", "\165\155\151\156", 
"\170\143\150\147", "\145\161", "\156\145", "\165\147\164", "\165\147\145", "\165\154\164", 
"\165\154\145", "\163\147\164", "\163\147\145", "\163\154\164", "\163\154\145", 
"\157\145\161", "\157\147\164", "\157\147\145", "\157\154\164", "\157\154\145", 
"\157\156\145", "\157\162\144", "\165\145\161", "\165\156\145", "\165\156\157", 
"\160\150\151", "\143\141\154\154", "\164\141\151\154", "\155\165\163\164\164\141\151\154", 
"\156\157\164\141\151\154", "\166\141\137\141\162\147", "\154\141\156\144\151\156\147\160\141\144", 
"\143\154\145\141\156\165\160", "\143\141\164\143\150", "\146\151\154\164\145\162", 
"\143\141\164\143\150\160\141\144", "\167\151\164\150\151\156", "\143\154\145\141\156\165\160\160\141\144", 
"\156\157\156\145", "\162\145\164", "\142\162", "\163\167\151\164\143\150", 
"\151\156\144\151\162\145\143\164\142\162", "\151\156\166\157\153\145", "\165\156\167\151\156\144", 
"\162\145\163\165\155\145", "\143\141\164\143\150\163\167\151\164\143\150", "\143\141\154\154\145\162", 
"\143\141\164\143\150\162\145\164", "\146\162\157\155", "\143\154\145\141\156\165\160\162\145\164", 
"\165\156\162\145\141\143\150\141\142\154\145", "\141\160\160\145\156\144\151\156\147", 
"\141\166\141\151\154\141\142\154\145\137\145\170\164\145\162\156\141\154\154\171", "\143\157\155\155\157\156", "\151\156\164\145\162\156\141\154", 
"\154\151\156\153\157\156\143\145", "\154\151\156\153\157\156\143\145\137\157\144\162", 
"\160\162\151\166\141\164\145", "\167\145\141\153\137\157\144\162", 
"\145\170\164\145\162\156\137\167\145\141\153", "\145\170\164\145\162\156\141\154", "\144\145\146\141\165\154\164", 
"\150\151\144\144\145\156", "\160\162\157\164\145\143\164\145\144", 
"\144\154\154\151\155\160\157\162\164", "\144\154\154\145\170\160\157\162\164", 
"\164\150\162\145\141\144\137\154\157\143\141\154", "\154\157\143\141\154\144\171\156\141\155\151\143", 
"\151\156\151\164\151\141\154\145\170\145\143", "\154\157\143\141\154\145\170\145\143", 
"\154\157\143\141\154\137\165\156\156\141\155\145\144\137\141\144\144\162", "\165\156\156\141\155\145\144\137\141\144\144\162", 
"\163\145\143\164\151\157\156", "\141\154\151\147\156", "\147\143", "\160\162\145\146\151\170", 
"\160\162\157\154\157\147\165\145", "\160\145\162\163\157\156\141\154\151\164\171", "\142\171\166\141\154", 
"\144\145\162\145\146\145\162\145\156\143\145\141\142\154\145", 
"\144\145\162\145\146\145\162\145\156\143\145\141\142\154\145\137\157\162\137\156\165\154\154", "\151\156\141\154\154\157\143\141", "\151\156\162\145\147", 
"\156\145\163\164", "\156\157\141\154\151\141\163", "\156\157\143\141\160\164\165\162\145", 
"\156\157\156\156\165\154\154", "\162\145\141\144\156\157\156\145", "\162\145\141\144\157\156\154\171", 
"\162\145\164\165\162\156\145\144", "\163\151\147\156\145\170\164", "\163\162\145\164", 
"\163\167\151\146\164\145\162\162\157\162", "\163\167\151\146\164\163\145\154\146", 
"\167\162\151\164\145\157\156\154\171", "\172\145\162\157\145\170\164", "\141\154\151\147\156\163\164\141\143\153", 
"\141\154\154\157\143\163\151\172\145", "\141\154\167\141\171\163\151\156\154\151\156\145", 
"\141\162\147\155\145\155\157\156\154\171", "\142\165\151\154\164\151\156", "\143\157\154\144", 
"\143\157\156\166\145\162\147\145\156\164", 
"\151\156\141\143\143\145\163\163\151\142\154\145\155\145\155\137\157\162\137\141\162\147\155\145\155\157\156\154\171", 
"\151\156\141\143\143\145\163\163\151\142\154\145\155\145\155\157\156\154\171", "\151\156\154\151\156\145\150\151\156\164", 
"\152\165\155\160\164\141\142\154\145", "\155\151\156\163\151\172\145", "\156\141\153\145\144", 
"\156\157\142\165\151\154\164\151\156", "\156\157\144\165\160\154\151\143\141\164\145", 
"\156\157\151\155\160\154\151\143\151\164\146\154\157\141\164", "\156\157\151\156\154\151\156\145", 
"\156\157\156\154\141\172\171\142\151\156\144", "\156\157\162\145\143\165\162\163\145", 
"\156\157\162\145\144\172\157\156\145", "\156\157\162\145\164\165\162\156", "\156\157\165\156\167\151\156\144", 
"\157\160\164\156\157\156\145", "\157\160\164\163\151\172\145", 
"\162\145\164\165\162\156\163\137\164\167\151\143\145", "\163\141\146\145\163\164\141\143\153", 
"\163\141\156\151\164\151\172\145\137\141\144\144\162\145\163\163", "\163\141\156\151\164\151\172\145\137\155\145\155\157\162\171", 
"\163\141\156\151\164\151\172\145\137\164\150\162\145\141\144", "\163\163\160", "\163\163\160\162\145\161", 
"\163\163\160\163\164\162\157\156\147", "\165\167\164\141\142\154\145", "\141\155\144\147\160\165\137\143\163", 
"\141\155\144\147\160\165\137\147\163", "\141\155\144\147\160\165\137\153\145\162\156\145\154", 
"\141\155\144\147\160\165\137\160\163", "\141\155\144\147\160\165\137\166\163", "\141\156\171\162\145\147\143\143", 
"\141\162\155\137\141\141\160\143\163\137\166\146\160\143\143", "\141\162\155\137\141\141\160\143\163\143\143", 
"\141\162\155\137\141\160\143\163\143\143", "\141\166\162\137\151\156\164\162\143\143", 
"\141\166\162\137\163\151\147\156\141\154\143\143", "\143\143", "\143\143\143", "\143\157\154\144\143\143", 
"\143\170\170\137\146\141\163\164\137\164\154\163\143\143", "\146\141\163\164\143\143", "\147\150\143\143\143", 
"\150\150\166\155\137\143\143\143", "\150\150\166\155\143\143", 
"\151\156\164\145\154\137\157\143\154\137\142\151\143\143", "\155\163\160\64\63\60\137\151\156\164\162\143\143", 
"\160\162\145\163\145\162\166\145\137\141\154\154\143\143", "\160\162\145\163\145\162\166\145\137\155\157\163\164\143\143", 
"\160\164\170\137\144\145\166\151\143\145", "\160\164\170\137\153\145\162\156\145\154", 
"\163\160\151\162\137\146\165\156\143", "\163\160\151\162\137\153\145\162\156\145\154", 
"\163\167\151\146\164\143\143", "\167\145\142\153\151\164\137\152\163\143\143", 
"\170\70\66\137\66\64\137\163\171\163\166\143\143", "\170\70\66\137\66\64\137\167\151\156\66\64\143\143", 
"\170\70\66\137\146\141\163\164\143\141\154\154\143\143", "\170\70\66\137\151\156\164\162\143\143", 
"\170\70\66\137\162\145\147\143\141\154\154\143\143", "\170\70\66\137\163\164\144\143\141\154\154\143\143", 
"\170\70\66\137\164\150\151\163\143\141\154\154\143\143", "\170\70\66\137\166\145\143\164\157\162\143\141\154\154\143\143", 
"\151\156\142\157\165\156\144\163", };

/** Lexer state names. */
public static final String[] lexStateNames = {
   "DEFAULT",
};
static final long[] jjtoToken = {
   0xffffffffffffff3fL, 0xffffffffffffffffL, 0xffffffffffffffffL, 0xffffffffffffffffL, 
   0xffffffffffffffffL, 0x7L, 
};
static final long[] jjtoSkip = {
   0xc0L, 0x0L, 0x0L, 0x0L, 
   0x0L, 0x0L, 
};
static protected SimpleCharStream input_stream;
static private final int[] jjrounds = new int[133];
static private final int[] jjstateSet = new int[266];
static protected char curChar;
/** Constructor. */
public llvmirTokenManager(SimpleCharStream stream){
   if (input_stream != null)
      throw new TokenMgrError("ERROR: Second call to constructor of static lexer. You must use ReInit() to initialize the static variables.", TokenMgrError.STATIC_LEXER_ERROR);
   input_stream = stream;
}

/** Constructor. */
public llvmirTokenManager(SimpleCharStream stream, int lexState){
   this(stream);
   SwitchTo(lexState);
}

/** Reinitialise parser. */
static public void ReInit(SimpleCharStream stream)
{
   jjmatchedPos = jjnewStateCnt = 0;
   curLexState = defaultLexState;
   input_stream = stream;
   ReInitRounds();
}
static private void ReInitRounds()
{
   int i;
   jjround = 0x80000001;
   for (i = 133; i-- > 0;)
      jjrounds[i] = 0x80000000;
}

/** Reinitialise parser. */
static public void ReInit(SimpleCharStream stream, int lexState)
{
   ReInit(stream);
   SwitchTo(lexState);
}

/** Switch to specified lex state. */
static public void SwitchTo(int lexState)
{
   if (lexState >= 1 || lexState < 0)
      throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
   else
      curLexState = lexState;
}

static protected Token jjFillToken()
{
   final Token t;
   final String curTokenImage;
   final int beginLine;
   final int endLine;
   final int beginColumn;
   final int endColumn;
   String im = jjstrLiteralImages[jjmatchedKind];
   curTokenImage = (im == null) ? input_stream.GetImage() : im;
   beginLine = input_stream.getBeginLine();
   beginColumn = input_stream.getBeginColumn();
   endLine = input_stream.getEndLine();
   endColumn = input_stream.getEndColumn();
   t = Token.newToken(jjmatchedKind, curTokenImage);

   t.beginLine = beginLine;
   t.endLine = endLine;
   t.beginColumn = beginColumn;
   t.endColumn = endColumn;

   return t;
}

static int curLexState = 0;
static int defaultLexState = 0;
static int jjnewStateCnt;
static int jjround;
static int jjmatchedPos;
static int jjmatchedKind;

/** Get the next Token. */
public static Token getNextToken() 
{
  Token matchedToken;
  int curPos = 0;

  EOFLoop :
  for (;;)
  {
   try
   {
      curChar = input_stream.BeginToken();
   }
   catch(java.io.IOException e)
   {
      jjmatchedKind = 0;
      matchedToken = jjFillToken();
      return matchedToken;
   }

   jjmatchedKind = 0x7fffffff;
   jjmatchedPos = 0;
   curPos = jjMoveStringLiteralDfa0_0();
   if (jjmatchedKind != 0x7fffffff)
   {
      if (jjmatchedPos + 1 < curPos)
         input_stream.backup(curPos - jjmatchedPos - 1);
      if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
      {
         matchedToken = jjFillToken();
         return matchedToken;
      }
      else
      {
         continue EOFLoop;
      }
   }
   int error_line = input_stream.getEndLine();
   int error_column = input_stream.getEndColumn();
   String error_after = null;
   boolean EOFSeen = false;
   try { input_stream.readChar(); input_stream.backup(1); }
   catch (java.io.IOException e1) {
      EOFSeen = true;
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
      if (curChar == '\n' || curChar == '\r') {
         error_line++;
         error_column = 0;
      }
      else
         error_column++;
   }
   if (!EOFSeen) {
      input_stream.backup(1);
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
   }
   throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
  }
}

static private void jjCheckNAdd(int state)
{
   if (jjrounds[state] != jjround)
   {
      jjstateSet[jjnewStateCnt++] = state;
      jjrounds[state] = jjround;
   }
}
static private void jjAddStates(int start, int end)
{
   do {
      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
   } while (start++ != end);
}
static private void jjCheckNAddTwoStates(int state1, int state2)
{
   jjCheckNAdd(state1);
   jjCheckNAdd(state2);
}

static private void jjCheckNAddStates(int start, int end)
{
   do {
      jjCheckNAdd(jjnextStates[start]);
   } while (start++ != end);
}

}
